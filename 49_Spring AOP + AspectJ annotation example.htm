<!DOCTYPE html><html lang="en"><title>Spring AOP + AspectJ annotation example</title><head><link rel="stylesheet" type="text/css" href="http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include.b22e3d.css" media="all" /><meta name="generator" content="WordPress 3.5.1" /><meta name="google-site-verification" content="VsVvSTVAouAluNodWeR30BeIWTr4c84HvN4Fn9WBsak" /><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="shortcut icon" href="/wp-content/themes/mkyong-ma/images/favicon.ico" /><script type='text/javascript' src='http://www.mkyong.com/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script><link rel='prev' title='Spring 3 JavaConfig @Import example' href='http://www.mkyong.com/spring3/spring-3-javaconfig-import-example/' /><link rel='next' title='Spring AOP + AspectJ in XML configuration example' href='http://www.mkyong.com/spring3/spring-aop-aspectj-in-xml-configuration-example/' /><link rel='shortlink' href='http://www.mkyong.com/?p=9356' /><meta name="keywords" content="annotation,aop,aspectj,spring,spring3" /><link rel="canonical" href="http://www.mkyong.com/spring3/spring-aop-aspectj-annotation-example/" /></head><body><div id="header-top"><div class="container"><div id="header-top-container"><ul><li><a href="/advertise-on-mkyong/" rel="nofollow">Advertise</a></li><li><a href="/contact-mkyong/" rel="nofollow">Contact Us</a></li><li><a href="/write-for-us/" rel="nofollow">Write For Us</a></li><li> <a href="http://feeds.feedburner.com/FeedForMkyong" rel="nofollow" title="RSS feed">RSS feed</a></li><li><a href="/blog/donate-to-charity/" rel="nofollow">Donate</a></li></ul></div></div></div><div id="header"><div class="container"><div id="header-logo"> <a href="/" title="mkyong.com"><div id="logo" ></div> </a></div><div id="header-banner"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div><div id="menu"><div class="container"><ul><li class="menu-allround"> <a href="/">Home</a></li><li class="menu-allround"> <a href="/all-tutorials-on-mkyong-com/">All Tutorials</a></li><li class="menu-topround"> <a href="#">Java Core</a><div id="java-menu" class="dropdown"><div class="tut-title">Java Core Tutorials</div><div class="dropdown-item"> <a href="/tag/java/"><div class="images img-border img-java img-holder"></div> </a><div>1. <a href="/tutorials/java-io-tutorials/">Java I/O</a></div><div>2. <a href="/tutorials/java-xml-tutorials/">Java XML</a></div><div>3. <a href="/tutorials/java-json-tutorials/">Java JSON</a></div><div>4. <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a></div><div>5. <a href="/tutorials/jdbc-tutorials/">JDBC</a></div><div>6. <a href="/tag/java/">Java Misc</a></div></div></div></li><li class="menu-topround"> <a href="#">JSF</a><div id="jsf-menu" class="dropdown"><div class="tut-title">JSF Tutorials</div><div class="dropdown-item"><a href="/tutorials/jsf-2-0-tutorials/"><div class="images img-border img-jsf2 img-holder"></div> </a><div>1. <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a></div></div></div></li><li class="menu-topround"> <a href="#">Spring</a><div id="spring-menu" class="dropdown"><div class="tut-title">Spring Tutorials</div><div class="dropdown-item"> <a href="/tutorials/spring-tutorials/"><div class="images img-border img-spring img-holder"></div> </a><div>1. <a href="/tutorials/spring-tutorials/">Spring Core</a></div><div>2. <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a></div><div>3. <a href="/tutorials/spring-security-tutorials/">Spring Security</a></div><div>4. <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a></div><div>5. <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a></div></div></div></li><li class="menu-topround"> <a href="#">Hibernate</a><div id="hibernate-menu" class="dropdown"><div class="tut-title">Hibernate Tutorials</div><div class="dropdown-item"> <a href="/tutorials/hibernate-tutorials/"><div class="images img-border img-hibernate img-holder"></div> </a><div>1. <a href="/tutorials/hibernate-tutorials/">Hibernate Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Struts</a><div id="struts-menu" class="dropdown"><div class="tut-title">Struts Tutorials</div><div class="dropdown-item"><a href="/tutorials/struts-2-tutorials/"><div class="images img-border img-struts img-holder"></div> </a><div>1. <a href="/tutorials/struts-tutorials/">Struts 1</a></div><div>2. <a href="/tutorials/struts-2-tutorials/">Struts 2</a></div></div></div></li><li class="menu-topround"> <a href="#">Android</a><div id="android-menu" class="dropdown"><div class="tut-title">Android Tutorials</div><div class="dropdown-item"> <a href="/tutorials/android-tutorial/"><div class="images img-border img-android img-holder"></div> </a><div>1. <a href="/tutorials/android-tutorial/">Android Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Others</a><div id="misc-menu" class="dropdown"><div class="dropdown-item"><ol><li><a href="/tutorials/wicket-tutorials/">Apache Wicket</a></li><li><a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a></li><li><a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></li><li><a href="/tutorials/maven-tutorials/">Maven</a></li><li><a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a></li><li><a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a></li><li><a href="/tutorials/junit-tutorials/">jUnit</a></li><li><a href="/tutorials/testng-tutorials/">TestNG</a></li><li><a href="/tutorials/jquery-tutorials/">jQuery</a></li><li><a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></li></ol></div></div></li></ul><div style="float:right;margin:4px 0"><form action="/search/" id="cse-search-box"><div> <input type="hidden" name="cx" value="partner-pub-2836379775501347:3714346998" /> <input type="hidden" name="cof" value="FORID:10" /> <input type="hidden" name="ie" value="UTF-8" /> <input type="text" name="q" size="30" style="height:20px;font-size:10pt;" /> <input type="submit" name="sa" value="Search" style="height:25px;"  /></div></form></div></div></div><div class="container"><div class="row"><div class="span10"><!-- google_ad_section_start(name=mkyongregion) --><div id="post-container"> <article class="post" id="post-9356"><header><h1> Spring AOP + AspectJ annotation example</h1><div class='post-meta'><div id="small-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=40&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div> Posted on <time datetime="2011-06-21T17:28:06+00:00">June 21, 2011</time><span> , &nbsp;&nbsp;&nbsp; Last modified : August 29, 2012 </span><div> By <a href="http://www.mkyong.com/author/mkyong/" rel="author">mkyong</a></div></div></div> </header><div class="post-content"><div id='dd_light_ajax_float'><div id='dd_content_wrap'><div class='dd_light_button'><div class='dd-loading' id='dd-google' ></div><div class='g-plusone' data-size='tall'></div></div><div class='dd_light_button'><div class='dd-loading' id='dd-fblike' ></div><iframe id='dd-fblike-iframe' src='' height='0' width='0' scrolling='no' frameborder='0'></iframe></div><div class='dd_light_button'><div class='dd-loading' id='dd-twitter' ></div><a href='https://twitter.com/share' class='twitter-share-button' data-via='mkyong' data-count='vertical'></a></div></div></div><p>In this tutorial, we show you how to integrate AspectJ annotation with Spring AOP framework. In simple, Spring AOP + AspectJ allow you to intercept method easily.</p><p>Common AspectJ annotations :</p><ol><li><strong>@Before</strong> – Run before the method execution</li><li><strong>@After</strong> – Run after the method returned a result</li><li><strong>@AfterReturning</strong> &#8211; Run after the method returned a result, intercept the returned result as well.</li><li><strong>@AfterThrowing</strong> – Run after the method throws an exception</li><li><strong>@Around</strong> – Run around the method execution, combine all three advices above.</li></ol><div class="note"> <strong>Note</strong><br /> For Spring AOP without AspectJ support, read this <a href="http://www.mkyong.com/spring/spring-aop-examples-advice">build-in Spring AOP examples</a>.</div><h4>1. Directory Structure</h4><p>See directory structure of this example.</p><div class="pic"> <img src="http://www.mkyong.com/wp-content/uploads/2011/06/spring-aop-aspectj-example.png" alt="directory structure of this example" title="spring-aop-aspectj-example" width="534" height="413" /></div><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7391621200" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>2. Project Dependencies</h4><p>To enable AspectJ, you need <strong>aspectjrt.jar</strong>, <strong>aspectjweaver.jar</strong> and <strong>spring-aop.jar</strong>. See following Maven <code>pom.xml</code> file.</p><div class="note"> <strong>AspectJ supported since Spring 2.0</strong><br /> This example is using Spring 3, but the AspectJ features are supported since Spring 2.0.</div><p><em>File : pom.xml</em></p><div class="wp_syntax"><div class="code"><pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;project</span> ...<span style="color: #000000; font-weight: bold;">&gt;</span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;properties<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;spring.version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>3.0.5.RELEASE<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/spring.version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/properties<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dependencies<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.springframework<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>spring-core<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>${spring.version}<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.springframework<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>spring-context<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>${spring.version}<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
		<span style="color: #808080; font-style: italic;">&lt;!-- Spring AOP + AspectJ --&gt;</span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.springframework<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>spring-aop<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>${spring.version}<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.aspectj<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>aspectjrt<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>1.6.11<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>org.aspectj<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/groupId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>aspectjweaver<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/artifactId<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
			<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>1.6.11<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/version<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dependency<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/dependencies<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/project<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre></div></div><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="3642936086" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>3. Spring Beans</h4><p>Normal bean, with few methods, later intercept it via AspectJ annotation.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.bo</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">interface</span> CustomerBo <span style="color: #009900;">&#123;</span>
&nbsp;
	<span style="color: #000066; font-weight: bold;">void</span> addCustomer<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #003399;">String</span> addCustomerReturnValue<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #000066; font-weight: bold;">void</span> addCustomerThrowException<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #000000; font-weight: bold;">throws</span> <span style="color: #003399;">Exception</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #000066; font-weight: bold;">void</span> addCustomerAround<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> name<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.bo.impl</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.customer.bo.CustomerBo</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerBoImpl <span style="color: #000000; font-weight: bold;">implements</span> CustomerBo <span style="color: #009900;">&#123;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> addCustomer<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;addCustomer() is running &quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> addCustomerReturnValue<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;addCustomerReturnValue() is running &quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;abc&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> addCustomerThrowException<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #000000; font-weight: bold;">throws</span> <span style="color: #003399;">Exception</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;addCustomerThrowException() is running &quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #000000; font-weight: bold;">throw</span> <span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">Exception</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Generic Error&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> addCustomerAround<span style="color: #009900;">&#40;</span><span style="color: #003399;">String</span> name<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;addCustomerAround() is running, args : &quot;</span> <span style="color: #339933;">+</span> name<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><h4>4. Enable AspectJ</h4><p>In Spring configuration file, put &#8220;<code>&lt;aop:aspectj-autoproxy /&gt;</code>&#8220;, and define your Aspect (interceptor) and normal bean.</p><p><em>File : Spring-Customer.xml</em></p><div class="wp_syntax"><div class="code"><pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;beans</span> <span style="color: #000066;">xmlns</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xmlns:xsi</span>=<span style="color: #ff0000;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span>
<span style="color: #009900;">	<span style="color: #000066;">xmlns:aop</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/aop&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xsi:schemaLocation</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans</span>
<span style="color: #009900;">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span>
<span style="color: #009900;">	http://www.springframework.org/schema/aop </span>
<span style="color: #009900;">	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;aop:aspectj-autoproxy</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;customerBo&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.customer.bo.impl.CustomerBoImpl&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
	<span style="color: #808080; font-style: italic;">&lt;!-- Aspect --&gt;</span>
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;logAspect&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.aspect.LoggingAspect&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/beans<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre></div></div><h4>4. AspectJ @Before</h4><p>In below example, the <code>logBefore()</code> method will be executed before the execution of customerBo interface, <code>addCustomer()</code> method.</p><div class="note"> <strong>Note</strong><br /> AspectJ &#8220;pointcuts&#8221; is used to declare which method is going to intercept, and you should refer to this <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-pointcuts" target="_blank">Spring AOP pointcuts guide</a> for full list of supported pointcuts expressions.</div><p><em>File : LoggingAspect.java</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.aspect</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.JoinPoint</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Aspect</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Before</span><span style="color: #339933;">;</span>
&nbsp;
@Aspect
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> LoggingAspect <span style="color: #009900;">&#123;</span>
&nbsp;
	@Before<span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;execution(* com.mkyong.customer.bo.CustomerBo.addCustomer(..))&quot;</span><span style="color: #009900;">&#41;</span>
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> logBefore<span style="color: #009900;">&#40;</span>JoinPoint joinPoint<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;logBefore() is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;hijacked : &quot;</span> <span style="color: #339933;">+</span> joinPoint.<span style="color: #006633;">getSignature</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getName</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;******&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerBo customer <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerBo<span style="color: #009900;">&#41;</span> appContext.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerBo&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	customer.<span style="color: #006633;">addCustomer</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>Output</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">logBefore<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running<span style="color: #339933;">!</span>
hijacked <span style="color: #339933;">:</span> addCustomer
<span style="color: #339933;">******</span>
addCustomer<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running</pre></div></div><h4>5. AspectJ @After</h4><p>In below example, the <code>logAfter()</code> method will be executed after the execution of customerBo interface, <code>addCustomer()</code> method.</p><p><em>File : LoggingAspect.java</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.aspect</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.JoinPoint</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Aspect</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.After</span><span style="color: #339933;">;</span>
&nbsp;
@Aspect
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> LoggingAspect <span style="color: #009900;">&#123;</span>
&nbsp;
	@After<span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;execution(* com.mkyong.customer.bo.CustomerBo.addCustomer(..))&quot;</span><span style="color: #009900;">&#41;</span>
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> logAfter<span style="color: #009900;">&#40;</span>JoinPoint joinPoint<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;logAfter() is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;hijacked : &quot;</span> <span style="color: #339933;">+</span> joinPoint.<span style="color: #006633;">getSignature</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getName</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;******&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerBo customer <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerBo<span style="color: #009900;">&#41;</span> appContext.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerBo&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	customer.<span style="color: #006633;">addCustomer</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>Output</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">addCustomer<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running 
logAfter<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running<span style="color: #339933;">!</span>
hijacked <span style="color: #339933;">:</span> addCustomer
<span style="color: #339933;">******</span></pre></div></div><h4>6. AspectJ @AfterReturning</h4><p>In below example, the <code>logAfterReturning()</code> method will be executed after the execution of customerBo interface, <code>addCustomerReturnValue()</code> method. In addition, you can intercept the returned value with the &#8220;<strong>returning</strong>&#8221; attribute.</p><p>To intercept returned value, the value of the &#8220;returning&#8221; attribute (result) need to be same with the method parameter (result).</p><p><em>File : LoggingAspect.java</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.aspect</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.JoinPoint</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Aspect</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.AfterReturning</span><span style="color: #339933;">;</span>
&nbsp;
@Aspect
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> LoggingAspect <span style="color: #009900;">&#123;</span>
&nbsp;
   @AfterReturning<span style="color: #009900;">&#40;</span>
      pointcut <span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;execution(* com.mkyong.customer.bo.CustomerBo.addCustomerReturnValue(..))&quot;</span>,
      returning<span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;result&quot;</span><span style="color: #009900;">&#41;</span>
   <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> logAfterReturning<span style="color: #009900;">&#40;</span>JoinPoint joinPoint, <span style="color: #003399;">Object</span> result<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;logAfterReturning() is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;hijacked : &quot;</span> <span style="color: #339933;">+</span> joinPoint.<span style="color: #006633;">getSignature</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getName</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Method returned value is : &quot;</span> <span style="color: #339933;">+</span> result<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;******&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
   <span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerBo customer <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerBo<span style="color: #009900;">&#41;</span> appContext.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerBo&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	customer.<span style="color: #006633;">addCustomerReturnValue</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>Output</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">addCustomerReturnValue<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running 
logAfterReturning<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running<span style="color: #339933;">!</span>
hijacked <span style="color: #339933;">:</span> addCustomerReturnValue
<span style="color: #003399;">Method</span> returned value is <span style="color: #339933;">:</span> abc
<span style="color: #339933;">******</span></pre></div></div><h4>7. AspectJ @AfterReturning</h4><p>In below example, the <code>logAfterThrowing()</code> method will be executed if the customerBo interface, <code>addCustomerThrowException()</code> method is throwing an exception.</p><p><em>File : LoggingAspect.java</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.aspect</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.JoinPoint</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Aspect</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.AfterThrowing</span><span style="color: #339933;">;</span>
&nbsp;
@Aspect
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> LoggingAspect <span style="color: #009900;">&#123;</span>
&nbsp;
   @AfterThrowing<span style="color: #009900;">&#40;</span>
      pointcut <span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;execution(* com.mkyong.customer.bo.CustomerBo.addCustomerThrowException(..))&quot;</span>,
      throwing<span style="color: #339933;">=</span> <span style="color: #0000ff;">&quot;error&quot;</span><span style="color: #009900;">&#41;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> logAfterThrowing<span style="color: #009900;">&#40;</span>JoinPoint joinPoint, <span style="color: #003399;">Throwable</span> error<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;logAfterThrowing() is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;hijacked : &quot;</span> <span style="color: #339933;">+</span> joinPoint.<span style="color: #006633;">getSignature</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getName</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Exception : &quot;</span> <span style="color: #339933;">+</span> error<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;******&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerBo customer <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerBo<span style="color: #009900;">&#41;</span> appContext.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerBo&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	customer.<span style="color: #006633;">addCustomerThrowException</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>Output</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">addCustomerThrowException<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running 
logAfterThrowing<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running<span style="color: #339933;">!</span>
hijacked <span style="color: #339933;">:</span> addCustomerThrowException
<span style="color: #003399;">Exception</span> <span style="color: #339933;">:</span> java.<span style="color: #006633;">lang</span>.<span style="color: #003399;">Exception</span><span style="color: #339933;">:</span> Generic <span style="color: #003399;">Error</span>
<span style="color: #339933;">******</span>
<span style="color: #003399;">Exception</span> in thread <span style="color: #0000ff;">&quot;main&quot;</span> java.<span style="color: #006633;">lang</span>.<span style="color: #003399;">Exception</span><span style="color: #339933;">:</span> Generic <span style="color: #003399;">Error</span>
	<span style="color: #666666; font-style: italic;">//...</span></pre></div></div><h4>8. AspectJ @Around</h4><p>In below example, the <code>logAround()</code> method will be executed before the customerBo interface, <code>addCustomerAround()</code> method, and you have to define the &#8220;<code>joinPoint.proceed();</code>&#8221; to control when should the interceptor return the control to the original <code>addCustomerAround()</code> method.</p><p><em>File : LoggingAspect.java</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.aspect</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.ProceedingJoinPoint</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Aspect</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.aspectj.lang.annotation.Around</span><span style="color: #339933;">;</span>
&nbsp;
@Aspect
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> LoggingAspect <span style="color: #009900;">&#123;</span>
&nbsp;
   @Around<span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;execution(* com.mkyong.customer.bo.CustomerBo.addCustomerAround(..))&quot;</span><span style="color: #009900;">&#41;</span>
   <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> logAround<span style="color: #009900;">&#40;</span>ProceedingJoinPoint joinPoint<span style="color: #009900;">&#41;</span> <span style="color: #000000; font-weight: bold;">throws</span> <span style="color: #003399;">Throwable</span> <span style="color: #009900;">&#123;</span>
&nbsp;
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;logAround() is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;hijacked method : &quot;</span> <span style="color: #339933;">+</span> joinPoint.<span style="color: #006633;">getSignature</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getName</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;hijacked arguments : &quot;</span> <span style="color: #339933;">+</span> <span style="color: #003399;">Arrays</span>.<span style="color: #006633;">toString</span><span style="color: #009900;">&#40;</span>joinPoint.<span style="color: #006633;">getArgs</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Around before is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	joinPoint.<span style="color: #006633;">proceed</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">//continue on the intercepted method</span>
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Around after is running!&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;******&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
   <span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerBo customer <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerBo<span style="color: #009900;">&#41;</span> appContext.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerBo&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	customer.<span style="color: #006633;">addCustomerAround</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;mkyong&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>Output</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">logAround<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running<span style="color: #339933;">!</span>
hijacked method <span style="color: #339933;">:</span> addCustomerAround
hijacked arguments <span style="color: #339933;">:</span> <span style="color: #009900;">&#91;</span>mkyong<span style="color: #009900;">&#93;</span>
Around before is running<span style="color: #339933;">!</span>
addCustomerAround<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running, args <span style="color: #339933;">:</span> mkyong
Around after is running<span style="color: #339933;">!</span>
<span style="color: #339933;">******</span></pre></div></div><h4>Conclusion</h4><p>It&#8217;s always recommended to apply the least power AsjectJ annotation. It&#8217;s rather long article about AspectJ in Spring. for further explanations and examples, please visit the reference links below.</p><div class="note"> <strong>Anti annotation or using JDK 1.4 ?</strong><br /> No worry, AspectJ supported XML configuration also, read this <a href="http://www.mkyong.com/spring3/spring-aop-aspectj-in-xml-configuration-example/">Spring AOP + AspectJ XML example</a>.</div><h4>Download Source Code</h4><div class="download"> Download it &#8211; <a href='http://www.mkyong.com/wp-content/uploads/2011/06/Spring3-AOP-AspectJ-Examples.zip'>Spring3-AOP-AspectJ-Example.zip</a> (8 KB)</div><h4>References</h4><ol><li><a href="http://www.eclipse.org/aspectj/doc/released/progguide/index.html" target="_blank">AspectJ programming guide</a></li><li><a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html" target="_blank">Spring AOP + AspectJ reference</a></li></ol><div id="post-meta-extra"> Tags : <span class="post-tag"><a href="http://www.mkyong.com/tag/annotation/" rel="tag">annotation</a> <a href="http://www.mkyong.com/tag/aop/" rel="tag">aop</a> <a href="http://www.mkyong.com/tag/aspectj/" rel="tag">aspectj</a> <a href="http://www.mkyong.com/tag/spring/" rel="tag">spring</a></span></div><div style="margin:20px 0;"><center><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7146814087" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></center></div><div id="author-info"><div id="big-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=100&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D100&amp;r=G' class='avatar avatar-100 photo' height='100' width='100' /></div><div id="author-description"><div id="author-link"> <a href="http://www.mkyong.com/author/mkyong/" rel="author"> mkyong </a></div> Founder of Mkyong.com, love Java and open source stuff. Follow him on <a href="https://twitter.com/mkyong">Twitter</a>, or befriend him on <a href="http://www.facebook.com/java.tutorial">Facebook</a> or <a href="https://plus.google.com/110948163568945735692?rel=author">Google Plus</a>. If you like my tutorials, consider making a <a href="http://www.mkyong.com/blog/donate-to-charity/">donation to the charity</a>, thanks.</div><div class="clearboth"></div></div><div id="post-after-related-post"><h4  class="related_post_title">Related Posts</h4><ul class="related_post"><li><a href="http://www.mkyong.com/spring3/spring-aop-aspectj-in-xml-configuration-example/" title="Spring AOP + AspectJ in XML configuration example">Spring AOP + AspectJ in XML configuration example</a></li><li><a href="http://www.mkyong.com/spring/spring-aop-transaction-management-in-hibernate/" title="Spring AOP transaction management in Hibernate">Spring AOP transaction management in Hibernate</a></li><li><a href="http://www.mkyong.com/spring/maven-spring-hibernate-annotation-mysql-example/" title="Maven + (Spring + Hibernate) Annotation + MySql Example">Maven + (Spring + Hibernate) Annotation + MySql Example</a></li><li><a href="http://www.mkyong.com/spring/spring-aop-example-pointcut-advisor/" title="Spring AOP Example &#8211; Pointcut , Advisor">Spring AOP Example &#8211; Pointcut , Advisor</a></li><li><a href="http://www.mkyong.com/spring/spring-aop-examples-advice/" title="Spring AOP Example &#8211; Advice">Spring AOP Example &#8211; Advice</a></li></ul></div><div id="post-after-popular-post"><h4>Popular Posts</h4><ul><li><a href="/featured/top-8-java-people-you-should-know/">Top 8 Java People You Should Know</a></li><li><a href="/featured/top-20-java-websites/">Top 20 Java Websites</a></li><li><a href="/featured/top-5-free-java-ebooks/">Top 5 Free Java eBooks</a></li><li><a href="/regular-expressions/10-java-regular-expression-examples-you-should-know/">Top 10 Java Regular Expression Examples</a></li><li><a href="/featured/top-5-open-source-qa-systems/">Top 5 Open Source Q&A Systems</a></li></ul></div><div class="clearboth"></div></div></article><div id='st-tutorial-list'><div id='st-tutorial-title'> You might also like following tutorials :</div><ul><li><a href='/tutorials/jsf-2-0-tutorials/' title='JSF 2 Tutorials'><div class='images img-border img-jsf2'></div></a></li><li><a href='/tutorials/spring-tutorials/' title='Spring Tutorials'><div class='images img-border img-spring'></div></a></li><li><a href='/tutorials/wicket-tutorials/' title='Apache Wicket Tutorials'><div class='images img-border img-wicket'></div></a></li><li><a href='/tutorials/struts-2-tutorials/' title='Struts 2.x Tutorials'><div class='images img-border img-struts2'></div></a></li><li><a href='/tutorials/spring-security-tutorials/' title='Spring Security Tutorials'><div class='images img-border img-spring'></div></a></li></ul><div class='clearboth'></div></div><div style="padding:0 20px 20px 0"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><div id="post-comments"><div id="disqus_thread"><div id="dsq-content"><ul id="dsq-comments"><li class="comment even thread-even depth-1" id="dsq-comment-138068"><div id="dsq-comment-header-138068" class="dsq-comment-header"> <cite id="dsq-cite-138068"> <span id="dsq-author-user-138068">Mark</span> </cite></div><div id="dsq-comment-body-138068" class="dsq-comment-body"><div id="dsq-comment-message-138068" class="dsq-comment-message"><p>Please fix the section title on the page <a href="http://www.mkyong.com/spring3/spring-aop-aspectj-annotation-example/" rel="nofollow">http://www.mkyong.com/spring3/spring-aop-aspectj-annotation-example/</a>. The correct section title &#8220;7. AspectJ @AfterThrowing&#8221;</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-137615"><div id="dsq-comment-header-137615" class="dsq-comment-header"> <cite id="dsq-cite-137615"> http://www.velocitypartners.net <span id="dsq-author-user-137615">Marcello Zanelli</span> </cite></div><div id="dsq-comment-body-137615" class="dsq-comment-body"><div id="dsq-comment-message-137615" class="dsq-comment-message"><p>Great tutorial! :D</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-136523"><div id="dsq-comment-header-136523" class="dsq-comment-header"> <cite id="dsq-cite-136523"> <span id="dsq-author-user-136523">vijay</span> </cite></div><div id="dsq-comment-body-136523" class="dsq-comment-body"><div id="dsq-comment-message-136523" class="dsq-comment-message"><p>Thanks for putting all this together.</p><p>I have a one question in spring transaction management AOP is used and following XML configuration is used to manage transaction.</p><p>I don&#8217;t see any pointcut (Before/after/AfterReturning/AfterThrowing/Around) like  . Please help me out to understand that how this transaction advise executes.</p><p>Thanks</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-136387"><div id="dsq-comment-header-136387" class="dsq-comment-header"> <cite id="dsq-cite-136387"> http://websitedetective.net/dn/engageonline.co.nz <span id="dsq-author-user-136387">Disabled Dating Service</span> </cite></div><div id="dsq-comment-body-136387" class="dsq-comment-body"><div id="dsq-comment-message-136387" class="dsq-comment-message"><p>I do believe all of the ideas you&#8217;ve introduced for your post. They&#8217;re very convincing and can certainly work.</p><p>Still, the posts are too brief for beginners. May you please extend them a bit from next time?</p><p>Thanks for the post.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-136245"><div id="dsq-comment-header-136245" class="dsq-comment-header"> <cite id="dsq-cite-136245"> <span id="dsq-author-user-136245">hzxlb910</span> </cite></div><div id="dsq-comment-body-136245" class="dsq-comment-body"><div id="dsq-comment-message-136245" class="dsq-comment-message"><p>good,thanks</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-136108"><div id="dsq-comment-header-136108" class="dsq-comment-header"> <cite id="dsq-cite-136108"> <span id="dsq-author-user-136108">Cristian Daniel Ortiz</span> </cite></div><div id="dsq-comment-body-136108" class="dsq-comment-body"><div id="dsq-comment-message-136108" class="dsq-comment-message"><p>Hi i am a completely newbie in AOP what if i need to to fill some fields in a class before call another method some flags (update,delete,save) i use beforeAdvice</p><p> @Before(&#8220;execution(* com.mkyong.customer.bo.CustomerBo.addCustomer(..))&#8221;)<br /> public void logBefore(JoinPoint joinPoint)<br /> {</p><p> System.out.println(&#8220;logBefore() is running!&#8221;);<br /> System.out.println(&#8220;hijacked : &#8221; + joinPoint.getSignature().getName());<br /> System.out.println(&#8220;******&#8221;);<br /> }</p><p>and the method receives a parameter example</p><p> DAO.Student.update(Student studenToBeUpdated)</p><p>how can i access the Student to apply my flags befored saved??</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-135993"><div id="dsq-comment-header-135993" class="dsq-comment-header"> <cite id="dsq-cite-135993"> <span id="dsq-author-user-135993">Abhijit</span> </cite></div><div id="dsq-comment-body-135993" class="dsq-comment-body"><div id="dsq-comment-message-135993" class="dsq-comment-message"><p>There is very blog explain in very lucid manner to understand newbie<br /> Keep it good work!<br /> Thanks a lot :)</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-133387"><div id="dsq-comment-header-133387" class="dsq-comment-header"> <cite id="dsq-cite-133387"> <span id="dsq-author-user-133387">Ram</span> </cite></div><div id="dsq-comment-body-133387" class="dsq-comment-body"><div id="dsq-comment-message-133387" class="dsq-comment-message"><p>7. AspectJ @AfterReturning should be 7. AspectJ @AfterThrowing</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-132855"><div id="dsq-comment-header-132855" class="dsq-comment-header"> <cite id="dsq-cite-132855"> <span id="dsq-author-user-132855">Vinod Maladkar</span> </cite></div><div id="dsq-comment-body-132855" class="dsq-comment-body"><div id="dsq-comment-message-132855" class="dsq-comment-message"><p>Very good blog and nice example.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-131956"><div id="dsq-comment-header-131956" class="dsq-comment-header"> <cite id="dsq-cite-131956"> <span id="dsq-author-user-131956">jagan</span> </cite></div><div id="dsq-comment-body-131956" class="dsq-comment-body"><div id="dsq-comment-message-131956" class="dsq-comment-message"><p>Hi Kyoung,</p><p>First of all, thanks a lot for publishing all this valuable information and aggregating on 1 web site. I visit your site frequently to clarify my knowledge. Now i have 1 question and the scenario is as follows:<br /> org.abc.xyz.service.CounterService.activeCount()<br /> and this service will be invoked from 2 execution paths:<br /> 1. org.abc.xyx.controllers.ABCController and<br /> 2. org.abc.xyz.controllers.XYZController</p><p>Now my question is can we have an aspect on activeCount for the execution path:- ABCController&#8211;&gt;CounterService</p><p>thanks,<br /> jagan</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-131126"><div id="dsq-comment-header-131126" class="dsq-comment-header"> <cite id="dsq-cite-131126"> <span id="dsq-author-user-131126">Greg</span> </cite></div><div id="dsq-comment-body-131126" class="dsq-comment-body"><div id="dsq-comment-message-131126" class="dsq-comment-message"><p>I have a question… how can these aspects work when the methods are called without it getting the instance from a bean…. As in…</p><p>Right now it works like this…<br /> CustomerBo customer = (CustomerBo) appContext.getBean(“customerBo”);<br /> customer.addCustomerAround(“mkyong”);</p><p>I want it make it work like this….<br /> CustomerBo customer = new CustomerBoImpl();<br /> customer.addCustomerAround(“mkyong”);</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-128640"><div id="dsq-comment-header-128640" class="dsq-comment-header"> <cite id="dsq-cite-128640"> http://www.statsaholic.com <span id="dsq-author-user-128640">Look</span> </cite></div><div id="dsq-comment-body-128640" class="dsq-comment-body"><div id="dsq-comment-message-128640" class="dsq-comment-message"><p>Its such as you read my mind! You appear to know a<br /> lot about this, such as you wrote the e-book in it or something.<br /> I think that you simply can do with some percent to drive the message home a bit, but instead<br /> of that, that is great blog. An excellent read. I&#8217;ll certainly be back.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-128125"><div id="dsq-comment-header-128125" class="dsq-comment-header"> <cite id="dsq-cite-128125"> http://jaykhimani.blogspot.com <span id="dsq-author-user-128125">Jay Khimani</span> </cite></div><div id="dsq-comment-body-128125" class="dsq-comment-body"><div id="dsq-comment-message-128125" class="dsq-comment-message"><p>Thanks for sharing this concise tutorial. It was a great help. One question. Is there a way to define an aspect which intercepts annotated fields? For e.g. If I&#8217;ve below class</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.jak.sandbox.aspect</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> MyClass <span style="color: #009900;">&#123;</span>
     @MyAnnotation
     <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #003399;">String</span> myField<span style="color: #339933;">;</span>
&nbsp;
     <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> doSomething<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
          <span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>Saving the world<span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
     <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>Now is it possible to define an aspect which will intercept the the field<pre>myField</pre><p> and invoke pointcut?</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-127075"><div id="dsq-comment-header-127075" class="dsq-comment-header"> <cite id="dsq-cite-127075"> http://Nowebsite <span id="dsq-author-user-127075">Himkar Dwivedi</span> </cite></div><div id="dsq-comment-body-127075" class="dsq-comment-body"><div id="dsq-comment-message-127075" class="dsq-comment-message"><p>hi,<br /> this is really gr8 tutorial, I just follow all the steps and work fine for me, but I am facing issue in point number 6.</p><p>I have a DAO class which has two method, addUser(user) and List getAllUsers() and I have one test call which create an user, add this user to db using DAO addUser method and after that it retrieve it.</p><p>this unit test class works fine without adding this process, but if I add this, its giving error while retrieving the values I am getting null user list in Test class while in DAO class same list has one user.</p><p>I am not able to figure it out how this user is getting destroyed in logging class. even in logging class itself the return value is null inside</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">@AfterReturning<span style="color: #009900;">&#40;</span>pointcut <span style="color: #339933;">=</span> <span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>execution<span style="color: #009900;">&#40;</span><span style="color: #339933;">*</span> po.<span style="color: #006633;">hike</span>.<span style="color: #006633;">dao</span>..<span style="color: #339933;">*</span>.<span style="color: #339933;">*</span><span style="color: #009900;">&#40;</span>..<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>, returning <span style="color: #339933;">=</span> <span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>result<span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span>
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> logAfterReturning<span style="color: #009900;">&#40;</span>JoinPoint joinPoint, <span style="color: #003399;">Object</span> result<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
&nbsp;
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>logAfterReturning<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> is running<span style="color: #339933;">!&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>hijacked <span style="color: #339933;">:</span> <span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span> <span style="color: #339933;">+</span> joinPoint.<span style="color: #006633;">getSignature</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #006633;">getName</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #003399;">Method</span> returned value is <span style="color: #339933;">:</span> <span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span> <span style="color: #339933;">+</span> result<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>
				.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;***************************************************&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #009900;">&#125;</span></pre></div></div><p>method</p><p>Please help me to find the issue</p><p>Thanks</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-127078"><div id="dsq-comment-header-127078" class="dsq-comment-header"> <cite id="dsq-cite-127078"> http://Nowebsite <span id="dsq-author-user-127078">Himkar Dwivedi</span> </cite></div><div id="dsq-comment-body-127078" class="dsq-comment-body"><div id="dsq-comment-message-127078" class="dsq-comment-message"><p>even if I remove this method from &#8220;DaoLoggingAspect&#8221; class, I am getting same issue</p></div></div></li><li class="comment odd alt depth-2" id="dsq-comment-127452"><div id="dsq-comment-header-127452" class="dsq-comment-header"> <cite id="dsq-cite-127452"> http://Nowebsite <span id="dsq-author-user-127452">Himkar Dwivedi</span> </cite></div><div id="dsq-comment-body-127452" class="dsq-comment-body"><div id="dsq-comment-message-127452" class="dsq-comment-message"><p>the main problem is with the around function, after removing around it works fine. but still I don&#8217;t know why around cause issue her</p></div></div></li></ul></li><li class="comment even thread-even depth-1" id="dsq-comment-125929"><div id="dsq-comment-header-125929" class="dsq-comment-header"> <cite id="dsq-cite-125929"> <span id="dsq-author-user-125929">Shanmugapriya</span> </cite></div><div id="dsq-comment-body-125929" class="dsq-comment-body"><div id="dsq-comment-message-125929" class="dsq-comment-message"><p>Really an excellent example. Thank you very much.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-125186"><div id="dsq-comment-header-125186" class="dsq-comment-header"> <cite id="dsq-cite-125186"> http://www.miguelgbiedma.com <span id="dsq-author-user-125186">Miguel</span> </cite></div><div id="dsq-comment-body-125186" class="dsq-comment-body"><div id="dsq-comment-message-125186" class="dsq-comment-message"><p>Thanks a lot. As always, straight to the point. Awesome tutorial.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-123093"><div id="dsq-comment-header-123093" class="dsq-comment-header"> <cite id="dsq-cite-123093"> <span id="dsq-author-user-123093">yout</span> </cite></div><div id="dsq-comment-body-123093" class="dsq-comment-body"><div id="dsq-comment-message-123093" class="dsq-comment-message"><p>thanks, it is helpful.</p><p>btw,?????????</p><pre>
7. AspectJ @AfterReturning
</pre><p>???</p><pre>
7. AspectJ @AfterThrowing
</pre></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-122798"><div id="dsq-comment-header-122798" class="dsq-comment-header"> <cite id="dsq-cite-122798"> <span id="dsq-author-user-122798">Kapil</span> </cite></div><div id="dsq-comment-body-122798" class="dsq-comment-body"><div id="dsq-comment-message-122798" class="dsq-comment-message"><p>Thanks</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-122050"><div id="dsq-comment-header-122050" class="dsq-comment-header"> <cite id="dsq-cite-122050"> <span id="dsq-author-user-122050">Scott</span> </cite></div><div id="dsq-comment-body-122050" class="dsq-comment-body"><div id="dsq-comment-message-122050" class="dsq-comment-message"><p>7. AspectJ @AfterReturning -&gt; @AfterThrowing</p><p>Great tutorial anyway!!!</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-104153"><div id="dsq-comment-header-104153" class="dsq-comment-header"> <cite id="dsq-cite-104153"> <span id="dsq-author-user-104153">Mohsin</span> </cite></div><div id="dsq-comment-body-104153" class="dsq-comment-body"><div id="dsq-comment-message-104153" class="dsq-comment-message"><p>Nice work Mkyong,</p><p>I have tried your example it is working fine in Tomcat but not working in Websphere and not getting any exception.</p><p>I am using below jars for AOP.<br /> aopalliance-1.0.jar<br /> aspectjtools-1.5.3.jar<br /> spring-aop-3.0.5.RELEASE.jar<br /> cglib-nodep-2.1_3.jar</p><p>kindly advice me why it is not working in Websphere 6.1</p></div></div><ul class="children"><li class="comment byuser comment-author-mkyong bypostauthor even depth-2" id="dsq-comment-104723"><div id="dsq-comment-header-104723" class="dsq-comment-header"> <cite id="dsq-cite-104723"> http://www.mkyong.com <span id="dsq-author-user-104723">mkyong</span> </cite></div><div id="dsq-comment-body-104723" class="dsq-comment-body"><div id="dsq-comment-message-104723" class="dsq-comment-message"><p>WebSphere products are all weird, and always have its own IBM standard. Advice is consult WebSphere document for AOP support, or call IBM :)</p></div></div><ul class="children"><li class="comment odd alt depth-3" id="dsq-comment-109907"><div id="dsq-comment-header-109907" class="dsq-comment-header"> <cite id="dsq-cite-109907"> <span id="dsq-author-user-109907">Ravishankar</span> </cite></div><div id="dsq-comment-body-109907" class="dsq-comment-body"><div id="dsq-comment-message-109907" class="dsq-comment-message"><p>I have a quick question for you at the moment.</p><p>How can we use Spring AOP along with AspectJ for static methods. If possible, can you show an example.</p><p>Thanks in advance :).</p></div></div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="dsq-comment-88629"><div id="dsq-comment-header-88629" class="dsq-comment-header"> <cite id="dsq-cite-88629"> <span id="dsq-author-user-88629">Vinicius</span> </cite></div><div id="dsq-comment-body-88629" class="dsq-comment-body"><div id="dsq-comment-message-88629" class="dsq-comment-message"><p>Great Post and Awesome blog by the way.</p><p>Vinicius</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-87834"><div id="dsq-comment-header-87834" class="dsq-comment-header"> <cite id="dsq-cite-87834"> <span id="dsq-author-user-87834">Ravishankar</span> </cite></div><div id="dsq-comment-body-87834" class="dsq-comment-body"><div id="dsq-comment-message-87834" class="dsq-comment-message"><p>Hi Young,</p><p> You have posted a great tutorial regarding the usage of Spring AOP along with AspectJ.  Great work, we are looking forward for more articles from you.</p><p>I have a quick question for you at the moment.</p><p>How can we use Spring AOP along with AspectJ  for static methods.  If possible, can you show an example.</p><p>Thanks in advance :).</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-84067"><div id="dsq-comment-header-84067" class="dsq-comment-header"> <cite id="dsq-cite-84067"> <span id="dsq-author-user-84067">Daniel Peña</span> </cite></div><div id="dsq-comment-body-84067" class="dsq-comment-body"><div id="dsq-comment-message-84067" class="dsq-comment-message"><p>Nice work Mkyong,  I suggest avoid xml configuration in bean aspect definition , you can annotate your class as @Configurable and Spring will add it to context:</p><p>import org.springframework.beans.factory.annotation.Configurable;</p><p>@Configurable<br /> @Aspect<br /> public class LoggingAspect {<br /> &#8230;.<br /> }</p><p>I hope you help.<br /> Regards</p></div></div><ul class="children"><li class="comment odd alt depth-2" id="dsq-comment-85476"><div id="dsq-comment-header-85476" class="dsq-comment-header"> <cite id="dsq-cite-85476"> <span id="dsq-author-user-85476">alex</span> </cite></div><div id="dsq-comment-body-85476" class="dsq-comment-body"><div id="dsq-comment-message-85476" class="dsq-comment-message"><p>I am sorry for my questio, i am just trying to set up logger through spring aspect annotations,do you you mean in case a make my aspect class @configurable there is no need for config.xml? Thank you</p></div></div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-83868"><div id="dsq-comment-header-83868" class="dsq-comment-header"> <cite id="dsq-cite-83868"> <span id="dsq-author-user-83868">Drago M. Petit</span> </cite></div><div id="dsq-comment-body-83868" class="dsq-comment-body"><div id="dsq-comment-message-83868" class="dsq-comment-message"><p>Outstanding tutorial to get started with Spring AOP, thank&#8217;s a lot !</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-83277"><div id="dsq-comment-header-83277" class="dsq-comment-header"> <cite id="dsq-cite-83277"> <span id="dsq-author-user-83277">Matthew</span> </cite></div><div id="dsq-comment-body-83277" class="dsq-comment-body"><div id="dsq-comment-message-83277" class="dsq-comment-message"><p>Anyway to dynamically set the value of aspectj annotation within a java class instead of &#8220;hard wired&#8221; during compilation time?</p><p>@Pointcut(&#8220;execution(public * *(..))&#8221;)<br /> This seem to be promising, but if this can be dynamically set during runtime of the program without restarting the JVM, it would be really nice.</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-81546"><div id="dsq-comment-header-81546" class="dsq-comment-header"> <cite id="dsq-cite-81546"> <span id="dsq-author-user-81546">Pankaj Soni</span> </cite></div><div id="dsq-comment-body-81546" class="dsq-comment-body"><div id="dsq-comment-message-81546" class="dsq-comment-message"><p>Nice work</p><p>I think one heading is typed incorrect by mistake.<br /> So, Please correct the heading in<br /> 7. AspectJ @AfterReturning     =&gt;      7. AspectJ @AfterThrowing</p><p>I would like to suggest that you have used only</p><div class="wp_syntax"><div class="code"><pre class="html4strict" style="font-family:monospace;">  <span style="color: #ddbb00;">&amp;lt;</span>b<span style="color: #ddbb00;">&amp;gt;</span>execution<span style="color: #ddbb00;">&amp;lt;</span>/b<span style="color: #ddbb00;">&amp;gt;</span></pre></div></div><p> in the examples.<br /> So, you can also show how to broaden the scope for pointcut. For example using</p><div class="wp_syntax"><div class="code"><pre class="html4strict" style="font-family:monospace;">  <span style="color: #ddbb00;">&amp;lt;</span>b<span style="color: #ddbb00;">&amp;gt;</span>within<span style="color: #ddbb00;">&amp;lt;</span>/b<span style="color: #ddbb00;">&amp;gt;</span></pre></div></div><p> like</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">@Pointcut<span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>execution<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">public</span> <span style="color: #339933;">*</span> <span style="color: #339933;">*</span><span style="color: #009900;">&#40;</span>..<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span>
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000066; font-weight: bold;">void</span> anyPublicOperation<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span>
&nbsp;
    @Pointcut<span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>within<span style="color: #009900;">&#40;</span>com.<span style="color: #006633;">xyz</span>.<span style="color: #006633;">someapp</span>.<span style="color: #006633;">trading</span>..<span style="color: #339933;">*</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span>
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000066; font-weight: bold;">void</span> inTrading<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span>
&nbsp;
    @Pointcut<span style="color: #009900;">&#40;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>anyPublicOperation<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">&amp;</span>amp<span style="color: #339933;">;&amp;</span>amp<span style="color: #339933;">;</span> inTrading<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#41;</span>
    <span style="color: #000000; font-weight: bold;">private</span> <span style="color: #000066; font-weight: bold;">void</span> tradingOperation<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span><span style="color: #009900;">&#125;</span></pre></div></div></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-81533"><div id="dsq-comment-header-81533" class="dsq-comment-header"> <cite id="dsq-cite-81533"> <span id="dsq-author-user-81533">dileep</span> </cite></div><div id="dsq-comment-body-81533" class="dsq-comment-body"><div id="dsq-comment-message-81533" class="dsq-comment-message"><p>Great Article, mkyong. Thanks for saving us lot of time !</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-81198"><div id="dsq-comment-header-81198" class="dsq-comment-header"> <cite id="dsq-cite-81198"> <span id="dsq-author-user-81198">Navneet Ranjan</span> </cite></div><div id="dsq-comment-body-81198" class="dsq-comment-body"><div id="dsq-comment-message-81198" class="dsq-comment-message"><p>Can we apply Spring AOP with AspectJ to class which is outside Spring context but part of the same web project?Please reply with spring 3.1.1.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-79643"><div id="dsq-comment-header-79643" class="dsq-comment-header"> <cite id="dsq-cite-79643"> <span id="dsq-author-user-79643">Muhammad</span> </cite></div><div id="dsq-comment-body-79643" class="dsq-comment-body"><div id="dsq-comment-message-79643" class="dsq-comment-message"><p>Please correct Point 7 heading &#8220;AspectJ @AfterReturning&#8221; to &#8220;AspectJ @AfterThrowing&#8221;.</p><p>Good Work!</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-78254"><div id="dsq-comment-header-78254" class="dsq-comment-header"> <cite id="dsq-cite-78254"> <span id="dsq-author-user-78254">Ramkumar</span> </cite></div><div id="dsq-comment-body-78254" class="dsq-comment-body"><div id="dsq-comment-message-78254" class="dsq-comment-message"><p>is possible to apply AspectJ on Bean Using Annotations. I have to capture entry and exit point of Bean Method.</p><p>Ramkumar</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-75483"><div id="dsq-comment-header-75483" class="dsq-comment-header"> <cite id="dsq-cite-75483"> <span id="dsq-author-user-75483">Michael</span> </cite></div><div id="dsq-comment-body-75483" class="dsq-comment-body"><div id="dsq-comment-message-75483" class="dsq-comment-message"><p>Hi MKYong,</p><p>On second thought, I think you can write book &#8220;Head First Spring&#8221;, please contact <a href="http://headfirstlabs.com/" rel="nofollow">http://headfirstlabs.com/</a>. Possibly you can make a million $ there -:)</p><p>Michael</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/spring3/spring-aop-aspectj-in-xml-configuration-example/' rel='external nofollow' class='url'>Spring AOP + AspectJ in XML configuration example</a></p></li></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/spring/spring-aop-examples-advice/' rel='external nofollow' class='url'>Spring AOP Example &#8211; Advice</a></p></li></li></ul></div></div><script type="text/javascript">/*<![CDATA[*/var disqus_url='http://www.mkyong.com/spring3/spring-aop-aspectj-annotation-example/';var disqus_identifier='9356 http://www.mkyong.com/?p=9356';var disqus_container_id='disqus_thread';var disqus_domain='disqus.com';var disqus_shortname='mkyong';var disqus_title="Spring AOP + AspectJ annotation example";var disqus_config=function(){var config=this;config.language='';config.callbacks.preData.push(function(){document.getElementById(disqus_container_id).innerHTML='';});config.callbacks.onReady.push(function(){var script=document.createElement('script');script.async=true;script.src='?cf_action=sync_comments&post_id=9356';var firstScript=document.getElementsByTagName("script")[0];firstScript.parentNode.insertBefore(script,firstScript);});};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/var DsqLocal={'trackbacks':[{'author_name':"Spring AOP Example &#8211; Advice",'author_url':"http:\/\/www.mkyong.com\/spring\/spring-aop-examples-advice\/",'date':"06\/21\/2011 05:32 PM",'excerpt':"[...] AOP + AspectJ Using AspectJ is more flexible and powerful, please refer to this tutorial &#8211; Using AspectJ annotation &hellip;",'type':"pingback"},{'author_name':"Spring AOP + AspectJ in XML configuration example",'author_url':"http:\/\/www.mkyong.com\/spring3\/spring-aop-aspectj-in-xml-configuration-example\/",'date':"06\/22\/2011 01:47 AM",'excerpt':"[...] , Updated: June 21, 2011 , Author: mkyongprintIn this tutorial, we show you how to convert last Spring AOP &hellip;",'type':"pingback"}],'trackback_url':"http:\/\/www.mkyong.com\/spring3\/spring-aop-aspectj-annotation-example\/trackback\/"};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/(function(){var dsq=document.createElement('script');dsq.type='text/javascript';dsq.async=true;dsq.src='//'+disqus_shortname+'.'+'disqus.com'+'/embed.js?pname=wordpress&pver=2.74';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(dsq);})();/*]]>*/</script></div></div><!-- google_ad_section_end --></div><div class="span4"><div id="sidebar"><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7072877400" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="5738517670" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" id="sidebar-fb"><div class='dd-loading' id='dd-fbpage'></div><iframe id='dd-fbpage-iframe' src='' height='0' width='0' scrolling='no' frameborder='0' style="border:none;overflow:hidden;" allowTransparency="true" ></iframe></div><div class="sidebar-ads"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="300x250" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><h2>Recent Posts</h2><div class="block"><ul><li><img width="32" height="17" src="http://www.mkyong.com/wp-content/uploads/2014/07/jsf-log4j-logo-150x80.jpg" class="attachment-32x32 wp-post-image" alt="jsf log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/jsf2/jsf-2-log4j-integration-example/">JSF 2 + Log4j Integration Example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-hello-world-example/">Log4j hello world example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-xml-example/">log4j.xml Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-annotation-example/">Spring Security + Hibernate Annotation Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/">Spring Security + Hibernate XML Example </a></div><div class="clearboth"></div></li></ul></div><h2>Popular Tutorials</h2><div class="block"><ul><li><img width="29" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/03/android.png" class="attachment-32x32 wp-post-image" alt="android" /><div class="rt-label"><a rel="tooltip" title="Created : 2012-03-22 14:48:53" href="http://www.mkyong.com/tutorials/android-tutorial/">Android Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/jsf2-logo.png" class="attachment-32x32 wp-post-image" alt="jsf2-logo" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-12-12 10:56:54" href="http://www.mkyong.com/tutorials/jsf-2-0-tutorials/">JSF 2.0 Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/04/Spring-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Spring tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-04-01 11:09:26" href="http://www.mkyong.com/tutorials/spring-tutorials/">Spring Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/maven-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Maven tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:24:51" href="http://www.mkyong.com/tutorials/maven-tutorials/">Maven Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/Hibernate-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Hibernate tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:18:30" href="http://www.mkyong.com/tutorials/hibernate-tutorials/">Hibernate Tutorial </a></div><div class="clearboth"></div></li></ul></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:600px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7953295395" data-ad-region = "mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" style="text-align: center"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="160x600" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div></div></div> <script type='text/javascript'>var _wpcf7={"loaderUrl":"http:\/\/www.mkyong.com\/wp-content\/plugins\/contact-form-7\/images\/ajax-loader.gif","sending":"Sending ...","cached":"1"};</script><footer><div id="footer-container"><div class="container"><div class="row"><div class="span4" id="footer-all-tut"><h3>All Available Tutorials</h3><ul class="unstyled"><li>Java Core Technologies :<div> <a href="/tutorials/java-io-tutorials/">Java I/O</a>, <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a>, <a href="/tutorials/java-xml-tutorials/">Java XML</a>, <a href="/tutorials/java-json-tutorials/">Java JSON</a>, <a href="/tutorials/jdbc-tutorials/">JDBC</a>, <a href="/category/java/">Java Misc</a></div></li><li>J2EE Frameworks :<div> <a href="/tutorials/hibernate-tutorials/">Hibernate</a>, <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a>, <a href="/tutorials/spring-tutorials/">Spring Core</a>, <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a>, <a href="/tutorials/spring-security-tutorials/">Spring Security</a>, <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a>, <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a><a href="/tutorials/wicket-tutorials/">Apache Wicket</a>, <a href="/tutorials/struts-tutorials/">Struts 1.x</a>, <a href="/tutorials/struts-2-tutorials/">Struts 2.x</a></div></li><li>Web Service :<div> <a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a>, <a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></div></li><li>Build Tools :<div> <a href="/tutorials/maven-tutorials/">Maven</a>, <a href="/tutorials/apache-archiva-tutorials/">Archiva</a></div></li><li>Unit Test Frameworks :<div> <a href="/tutorials/junit-tutorials/">jUnit</a>, <a href="/tutorials/testng-tutorials/">TestNG</a></div></li><li>Others :<div> <a href="/tutorials/android-tutorial/">Android</a>, <a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a>, <a href="/tutorials/jquery-tutorials/">jQuery</a>, <a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a>, <a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></div></li></ul></div><div class="span3"><h3>Favorites Links</h3><ul class="unstyled"><li><a href="http://developer.android.com/training/index.html" target="_blank" rel="nofollow">Android Getting Started</a></li><li><a href="https://developers.google.com/appengine/docs/java/gettingstarted/" target="_blank" rel="nofollow">Google App Engine - Java</a></li><li><a href="http://www.dzone.com/" target="_blank" rel="nofollow">DZone - Fresh Links</a></li><li><a href="http://docs.oracle.com/javaee/5/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 5 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 6 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/7/tutorial/doc/" target="_blank" rel="nofollow">Official Java EE 7 Tutorial</a></li><li><a href="http://docs.spring.io/spring/docs/2.5.x/reference/index.html" target="_blank" rel="nofollow">Spring 2.5.x documentation</a></li><li><a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/" target="_blank" rel="nofollow">Spring 3.2.x documentation</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/" target="_blank">Spring Security 3.2.x documentation</a></li><li><a href="http://docs.jboss.org/hibernate/core/4.3/manual/en-US/html_single/" target="_blank" rel="nofollow">Hibernate core 4.3 documentation</a></li><li><a href="http://download.oracle.com/javase/6/docs/api/overview-summary.html" target="_blank" rel="nofollow">Java SE 6.0 API documentation</a></li><li><a href="http://jsp.java.net/" target="_blank" rel="nofollow">JSP home page</a></li><li><a href="http://javaserverfaces.java.net/" target="_blank" rel="nofollow">JSF home page</a></li><li><a href="http://www.eclipse.org/downloads/" target="_blank" rel="nofollow">Eclipse IDE for Java developer</a></li><li><a href="http://struts.apache.org/release/1.3.x/userGuide/index.html" target="_blank" rel="nofollow">Struts 1.3.x documentation</a></li><li><a href="http://struts.apache.org/release/2.3.x/docs/home.html" target="_blank" rel="nofollow">Struts 2.3.x documentation</a></li><li><a href="http://maven.apache.org/" target="_blank" rel="nofollow">Maven home page</a></li><li><a href="http://search.maven.org/" target="_blank" rel="nofollow">Maven central repository Search</a></li><li><a href="http://ant.apache.org/" target="_blank" rel="nofollow">Ant home page</a></li><li><a href="http://jax-ws.java.net/" target="_blank" rel="nofollow">JAX-WS Official Website</a></li><li><a href="http://jersey.java.net/" target="_blank" rel="nofollow">JAX-RS Official Website (Jersey)</a></li></ul></div><div class="span3"><h3>Friends &amp; Links</h3><ul class="unstyled"><input type="hidden" name="activepost" id="activepost" value="9356" /><li><a href="http://www.javacodegeeks.com/" target="_blank">Java Code Geeks</a></li><li><a href="http://www.videophpblog.com" target="_blank">PHP Tutorials</a></li><li><a href="http://www.tenthofmarch.com/" target="_blank">TenthOfMarch</a></li><li><a href="http://www.web2secure.com" target="_blank">Web Security Blog</a></li><li><a href="http://www.fromdev.com" target="_blank">Web Development</a></li><li><a href="http://beust.com" target="_blank">Cédric Beust (TestNG)</a></li></ul></div><div class="span4"><h3>About Us</h3><p> Mkyong.com is a weblog dedicated to Java/J2EE developers and Web Developers. We constantly publish useful tricks, tutorials on J2EE or web development.</p><p> All examples are simple, easy to read, and full source code available, and of course well tested in our development environment.</p> <strong>We're Social</strong><ol><li>Twitter - <a href="http://twitter.com/#!/mkyong" target="_blank">Follow Me</a></li><li>Facebook - <a href="http://www.facebook.com/java.tutorial" target="_blank">Like Me</a></li><li>Google Plus - <a href="https://plus.google.com/110948163568945735692" target="_blank">Add Me</a></li><li>RSS - <a href="http://feeds.feedburner.com/FeedForMkyong" target="_blank">Subscribe Me</a></li></ol></div></div></div></div><div id="footer-copyright"><div class="container"> Copyright &copy; 2008-2014 Mkyong.com, all rights reserved.</div></div></footer><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-752408-5','mkyong.com');ga('send','pageview');</script><script type='text/javascript'>function _dmBootstrap(file){var _dma=document.createElement('script');_dma.type='text/javascript';_dma.async=true;_dma.src=('https:'==document.location.protocol?'https://':'http://')+file;(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(_dma);}
function _dmFollowup(file){if(typeof DMAds==='undefined')_dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
(function(){_dmBootstrap('cdn1.DeveloperMedia.com/a.min.js');setTimeout(_dmFollowup,2000);})();</script><script type="text/javascript" src="/wp-content/themes/mkyong-ma/js/core-latest.js?v=2013"></script><script type="text/javascript">function w3tc_load_js(u){var d=document,p=d.getElementsByTagName('HEAD')[0],c=d.createElement('script');c.type='text/javascript';c.src=u;p.appendChild(c);}</script><script type="text/javascript">w3tc_load_js('http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include-footer.15c8b4.js');</script></body></html>