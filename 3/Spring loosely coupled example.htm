<!DOCTYPE html><html lang="en"><title>Spring loosely coupled example</title><head><link rel="stylesheet" type="text/css" href="http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include.b22e3d.css" media="all" /><meta name="generator" content="WordPress 3.5.1" /><meta name="google-site-verification" content="VsVvSTVAouAluNodWeR30BeIWTr4c84HvN4Fn9WBsak" /><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="shortcut icon" href="/wp-content/themes/mkyong-ma/images/favicon.ico" /><script type='text/javascript' src='http://www.mkyong.com/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script><link rel='prev' title='How to load multiple Spring bean configuration file' href='http://www.mkyong.com/spring/load-multiple-spring-bean-configuration-file/' /><link rel='next' title='How to install Spring IDE in Eclipse' href='http://www.mkyong.com/spring/how-to-install-spring-ide-in-eclipse/' /><link rel='shortlink' href='http://www.mkyong.com/?p=3619' /><meta name="keywords" content="spring" /><link rel="canonical" href="http://www.mkyong.com/spring/spring-loosely-coupled-example/" /></head><body><div id="header-top"><div class="container"><div id="header-top-container"><ul><li><a href="/advertise-on-mkyong/" rel="nofollow">Advertise</a></li><li><a href="/contact-mkyong/" rel="nofollow">Contact Us</a></li><li><a href="/write-for-us/" rel="nofollow">Write For Us</a></li><li> <a href="http://feeds.feedburner.com/FeedForMkyong" rel="nofollow" title="RSS feed">RSS feed</a></li><li><a href="/blog/donate-to-charity/" rel="nofollow">Donate</a></li></ul></div></div></div><div id="header"><div class="container"><div id="header-logo"> <a href="/" title="mkyong.com"><div id="logo" ></div> </a></div><div id="header-banner"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div><div id="menu"><div class="container"><ul><li class="menu-allround"> <a href="/">Home</a></li><li class="menu-allround"> <a href="/all-tutorials-on-mkyong-com/">All Tutorials</a></li><li class="menu-topround"> <a href="#">Java Core</a><div id="java-menu" class="dropdown"><div class="tut-title">Java Core Tutorials</div><div class="dropdown-item"> <a href="/tag/java/"><div class="images img-border img-java img-holder"></div> </a><div>1. <a href="/tutorials/java-io-tutorials/">Java I/O</a></div><div>2. <a href="/tutorials/java-xml-tutorials/">Java XML</a></div><div>3. <a href="/tutorials/java-json-tutorials/">Java JSON</a></div><div>4. <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a></div><div>5. <a href="/tutorials/jdbc-tutorials/">JDBC</a></div><div>6. <a href="/tag/java/">Java Misc</a></div></div></div></li><li class="menu-topround"> <a href="#">JSF</a><div id="jsf-menu" class="dropdown"><div class="tut-title">JSF Tutorials</div><div class="dropdown-item"><a href="/tutorials/jsf-2-0-tutorials/"><div class="images img-border img-jsf2 img-holder"></div> </a><div>1. <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a></div></div></div></li><li class="menu-topround"> <a href="#">Spring</a><div id="spring-menu" class="dropdown"><div class="tut-title">Spring Tutorials</div><div class="dropdown-item"> <a href="/tutorials/spring-tutorials/"><div class="images img-border img-spring img-holder"></div> </a><div>1. <a href="/tutorials/spring-tutorials/">Spring Core</a></div><div>2. <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a></div><div>3. <a href="/tutorials/spring-security-tutorials/">Spring Security</a></div><div>4. <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a></div><div>5. <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a></div></div></div></li><li class="menu-topround"> <a href="#">Hibernate</a><div id="hibernate-menu" class="dropdown"><div class="tut-title">Hibernate Tutorials</div><div class="dropdown-item"> <a href="/tutorials/hibernate-tutorials/"><div class="images img-border img-hibernate img-holder"></div> </a><div>1. <a href="/tutorials/hibernate-tutorials/">Hibernate Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Struts</a><div id="struts-menu" class="dropdown"><div class="tut-title">Struts Tutorials</div><div class="dropdown-item"><a href="/tutorials/struts-2-tutorials/"><div class="images img-border img-struts img-holder"></div> </a><div>1. <a href="/tutorials/struts-tutorials/">Struts 1</a></div><div>2. <a href="/tutorials/struts-2-tutorials/">Struts 2</a></div></div></div></li><li class="menu-topround"> <a href="#">Android</a><div id="android-menu" class="dropdown"><div class="tut-title">Android Tutorials</div><div class="dropdown-item"> <a href="/tutorials/android-tutorial/"><div class="images img-border img-android img-holder"></div> </a><div>1. <a href="/tutorials/android-tutorial/">Android Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Others</a><div id="misc-menu" class="dropdown"><div class="dropdown-item"><ol><li><a href="/tutorials/wicket-tutorials/">Apache Wicket</a></li><li><a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a></li><li><a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></li><li><a href="/tutorials/maven-tutorials/">Maven</a></li><li><a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a></li><li><a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a></li><li><a href="/tutorials/junit-tutorials/">jUnit</a></li><li><a href="/tutorials/testng-tutorials/">TestNG</a></li><li><a href="/tutorials/jquery-tutorials/">jQuery</a></li><li><a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></li></ol></div></div></li></ul><div style="float:right;margin:4px 0"><form action="/search/" id="cse-search-box"><div> <input type="hidden" name="cx" value="partner-pub-2836379775501347:3714346998" /> <input type="hidden" name="cof" value="FORID:10" /> <input type="hidden" name="ie" value="UTF-8" /> <input type="text" name="q" size="30" style="height:20px;font-size:10pt;" /> <input type="submit" name="sa" value="Search" style="height:25px;"  /></div></form></div></div></div><div class="container"><div class="row"><div class="span10"><!-- google_ad_section_start(name=mkyongregion) --><div id="post-container"> <article class="post" id="post-3619"><header><h1> Spring loosely coupled example</h1><div class='post-meta'><div id="small-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=40&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div> Posted on <time datetime="2010-03-03T10:10:23+00:00">March 3, 2010</time><span> , &nbsp;&nbsp;&nbsp; Last modified : November 7, 2012 </span><div> By <a href="http://www.mkyong.com/author/mkyong/" rel="author">mkyong</a></div></div></div> </header><div class="post-content"><div id='dd_light_ajax_float'><div id='dd_content_wrap'><div class='dd_light_button'><div class='dd-loading' id='dd-google' ></div><div class='g-plusone' data-size='tall'></div></div><div class='dd_light_button'><div class='dd-loading' id='dd-fblike' ></div><iframe id='dd-fblike-iframe' src='' height='0' width='0' scrolling='no' frameborder='0'></iframe></div><div class='dd_light_button'><div class='dd-loading' id='dd-twitter' ></div><a href='https://twitter.com/share' class='twitter-share-button' data-via='mkyong' data-count='vertical'></a></div></div></div><p>The concept of object-oriented is a good design to break your system into a group of reusable objects. However, when system grows larger, especially in Java project, the huge object dependencies will always tightly coupled  causing objects very hard to manage or modify. In this scenario, you can use Spring framework to act as a central module to manage all the object dependencies easily and efficiently.</p><h4>Output Generator Example</h4><p>Let&#8217;s see an example, assume your project has a function to output the content to Csv or Json format. Your code may look like the following example:</p><p><em>File : IOutputGenerator.java &#8211; An interface for output generator</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.output</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">interface</span> IOutputGenerator
<span style="color: #009900;">&#123;</span>
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> generateOutput<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><em>File : CsvOutputGenerator.java &#8211; A Csv output generator to implement the IOutputGenerator interface.</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.output.impl</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.IOutputGenerator</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CsvOutputGenerator <span style="color: #000000; font-weight: bold;">implements</span> IOutputGenerator
<span style="color: #009900;">&#123;</span>
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> generateOutput<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Csv Output Generator&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><em>File : JsonOutputGenerator.java &#8211; A Json output generator to implement the IOutputGenerator interface.</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.output.impl</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.IOutputGenerator</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> JsonOutputGenerator <span style="color: #000000; font-weight: bold;">implements</span> IOutputGenerator
<span style="color: #009900;">&#123;</span>
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> generateOutput<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;Json Output Generator&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>There are couple of ways to call the IOutputGenerator, and how to use Spring to avoid objects to coupled tightly with each other.</p><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7391621200" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>1. Method 1 &#8211; Call it directly</h4><p>Normal way, call it directly.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.common</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.IOutputGenerator</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.impl.CsvOutputGenerator</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> App 
<span style="color: #009900;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> main<span style="color: #009900;">&#40;</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> args <span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
    	IOutputGenerator output <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> CsvOutputGenerator<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    	output.<span style="color: #006633;">generateOutput</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><strong>Problem</strong><br /> In this way, the problem is the &#8220;output&#8221; is coupled tightly to CsvOutputGenerator, every change of output generator may involve code change. If this code is scattered all over of your project, every change of the output generator will make you suffer seriously.</p><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="3642936086" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>Method 2 &#8211; Call it with helper class</h4><p>You may think of creating a helper class to move all the output implementation inside.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.output</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.IOutputGenerator</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.impl.CsvOutputGenerator</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> OutputHelper
<span style="color: #009900;">&#123;</span>
	IOutputGenerator outputGenerator<span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> OutputHelper<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		outputGenerator <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> CsvOutputGenerator<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> generateOutput<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		outputGenerator.<span style="color: #006633;">generateOutput</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>Call it via helper class.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.common</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.OutputHelper</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> App 
<span style="color: #009900;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> main<span style="color: #009900;">&#40;</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> args <span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
    	OutputHelper output <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> OutputHelper<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    	output.<span style="color: #006633;">generateOutput</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span> 
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p><strong>Problem</strong><br /> This looks more elegant, and you only need to manage a single helper class, however the helper class is still tightly coupled to CsvOutputGenerator, every change of output generator still involves minor code change.</p><h4>Method 3 &#8211; Spring</h4><p>In this scenario, Spring Dependency Injection (DI) is a good choice. Spring can make your output generator loosely coupled to the output generator.</p><p>Minor change in OutputHelper class.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.output</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.IOutputGenerator</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> OutputHelper
<span style="color: #009900;">&#123;</span>
	IOutputGenerator outputGenerator<span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> generateOutput<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		outputGenerator.<span style="color: #006633;">generateOutput</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> setOutputGenerator<span style="color: #009900;">&#40;</span>IOutputGenerator outputGenerator<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">outputGenerator</span> <span style="color: #339933;">=</span> outputGenerator<span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>Create a Spring bean configuration file and declare all your Java object dependencies here.</p><div class="wp_syntax"><div class="code"><pre class="xml" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">&lt;!-- Spring-Common.xml --&gt;</span>
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;beans</span> <span style="color: #000066;">xmlns</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span style="color: #009900;"><span style="color: #000066;">xmlns:xsi</span>=<span style="color: #ff0000;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span style="color: #009900;"><span style="color: #000066;">xsi:schemaLocation</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans</span>
<span style="color: #009900;">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;OutputHelper&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.output.OutputHelper&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;property</span> <span style="color: #000066;">name</span>=<span style="color: #ff0000;">&quot;outputGenerator&quot;</span> <span style="color: #000066;">ref</span>=<span style="color: #ff0000;">&quot;CsvOutputGenerator&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/bean<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;CsvOutputGenerator&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.output.impl.CsvOutputGenerator&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;JsonOutputGenerator&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.output.impl.JsonOutputGenerator&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/beans<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre></div></div><p>Call it via Spring</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.common</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.context.ApplicationContext</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.context.support.ClassPathXmlApplicationContext</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.output.OutputHelper</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> App 
<span style="color: #009900;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> main<span style="color: #009900;">&#40;</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> args <span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
    	ApplicationContext context <span style="color: #339933;">=</span> 
    	   <span style="color: #000000; font-weight: bold;">new</span> ClassPathXmlApplicationContext<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> <span style="color: #009900;">&#123;</span><span style="color: #0000ff;">&quot;Spring-Common.xml&quot;</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    	OutputHelper output <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>OutputHelper<span style="color: #009900;">&#41;</span>context.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;OutputHelper&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    	output.<span style="color: #006633;">generateOutput</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>Now, you just need to change the Spring XML file for a different output generator. When output changed, you need to modify the Spring XML file only, no code changed, means less error.</p><h4>Conclusion</h4><p>With Spring framework &#8211; Dependency Injection (DI) is a useful feature for object dependencies management, it is just elegant, highly flexible and facilitates maintainability, especially in large Java project.</p><div id="post-meta-extra"> Tags : <span class="post-tag"><a href="http://www.mkyong.com/tag/spring/" rel="tag">spring</a></span></div><div style="margin:20px 0;"><center><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7146814087" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></center></div><div id="author-info"><div id="big-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=100&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D100&amp;r=G' class='avatar avatar-100 photo' height='100' width='100' /></div><div id="author-description"><div id="author-link"> <a href="http://www.mkyong.com/author/mkyong/" rel="author"> mkyong </a></div> Founder of Mkyong.com, love Java and open source stuff. Follow him on <a href="https://twitter.com/mkyong">Twitter</a>, or befriend him on <a href="http://www.facebook.com/java.tutorial">Facebook</a> or <a href="https://plus.google.com/110948163568945735692?rel=author">Google Plus</a>. If you like my tutorials, consider making a <a href="http://www.mkyong.com/blog/donate-to-charity/">donation to the charity</a>, thanks.</div><div class="clearboth"></div></div><div id="post-after-related-post"><h4  class="related_post_title">Related Posts</h4><ul class="related_post"><li><a href="http://www.mkyong.com/spring/how-to-autowire-datasource-in-jdbcdaosupport/" title="How to autowire DataSource in JdbcDaoSupport">How to autowire DataSource in JdbcDaoSupport</a></li><li><a href="http://www.mkyong.com/unittest/testng-spring-integration-example/" title="TestNG + Spring Integration Example">TestNG + Spring Integration Example</a></li><li><a href="http://www.mkyong.com/spring/spring-and-java-thread-example/" title="Spring and Java Thread example">Spring and Java Thread example</a></li><li><a href="http://www.mkyong.com/jsf2/spring-autowired-into-jsf-custom-validator/" title="Spring @Autowired into JSF custom validator">Spring @Autowired into JSF custom validator</a></li><li><a href="http://www.mkyong.com/spring3/spring-3-and-jsr-330-inject-and-named-example/" title="Spring 3 and JSR-330 @Inject and @Named example">Spring 3 and JSR-330 @Inject and @Named example</a></li></ul></div><div id="post-after-popular-post"><h4>Popular Posts</h4><ul><li><a href="/featured/top-8-java-people-you-should-know/">Top 8 Java People You Should Know</a></li><li><a href="/featured/top-20-java-websites/">Top 20 Java Websites</a></li><li><a href="/featured/top-5-free-java-ebooks/">Top 5 Free Java eBooks</a></li><li><a href="/regular-expressions/10-java-regular-expression-examples-you-should-know/">Top 10 Java Regular Expression Examples</a></li><li><a href="/featured/top-5-open-source-qa-systems/">Top 5 Open Source Q&A Systems</a></li></ul></div><div class="clearboth"></div></div></article><div id='st-tutorial-list'><div id='st-tutorial-title'> You might also like following tutorials :</div><ul><li><a href='/tutorials/spring-tutorials/' title='Spring Tutorials'><div class='images img-border img-spring'></div></a></li><li><a href='/tutorials/android-tutorial/' title='Android Tutorials'><div class='images img-border img-android'></div></a></li><li><a href='/tag/java/' title='Java Tutorials'><div class='images img-border img-java'></div></a></li><li><a href='/tutorials/jsf-2-0-tutorials/' title='JSF 2 Tutorials'><div class='images img-border img-jsf2'></div></a></li><li><a href='/tutorials/java-io/' title='Java I/O Tutorials'><div class='images img-border img-io'></div></a></li></ul><div class='clearboth'></div></div><div style="padding:0 20px 20px 0"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><div id="post-comments"><div id="disqus_thread"><div id="dsq-content"><ul id="dsq-comments"><li class="comment even thread-even depth-1" id="dsq-comment-137162"><div id="dsq-comment-header-137162" class="dsq-comment-header"> <cite id="dsq-cite-137162"> <span id="dsq-author-user-137162">jeff</span> </cite></div><div id="dsq-comment-body-137162" class="dsq-comment-body"><div id="dsq-comment-message-137162" class="dsq-comment-message"><p>Great Example! Thanks Mr.Mkyong for clear explanation and showing the differences between three approaches. Great work! Keep it up.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-132807"><div id="dsq-comment-header-132807" class="dsq-comment-header"> <cite id="dsq-cite-132807"> <span id="dsq-author-user-132807">Bogdan</span> </cite></div><div id="dsq-comment-body-132807" class="dsq-comment-body"><div id="dsq-comment-message-132807" class="dsq-comment-message"><p>Or simplier, without Helper and no coupling :</p><p>ApplicationContext context =<br /> new ClassPathXmlApplicationContext(new String[] {&#8220;SpringBeans.xml&#8221;});</p><p> IOutputGenerator output = (IOutputGenerator)context.getBean(&#8220;JsonOutputGenerator&#8221;);<br /> output.generateOutput();</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-132896"><div id="dsq-comment-header-132896" class="dsq-comment-header"> <cite id="dsq-cite-132896"> <span id="dsq-author-user-132896">BelianskyAS</span> </cite></div><div id="dsq-comment-body-132896" class="dsq-comment-body"><div id="dsq-comment-message-132896" class="dsq-comment-message"><p>And you have to change source code, when you need to use the CsvOutputGenerator. This is tight coupling.</p><p>p.s. Sorry my bad english :)</p></div></div><ul class="children"><li class="comment odd alt depth-3" id="dsq-comment-137387"><div id="dsq-comment-header-137387" class="dsq-comment-header"> <cite id="dsq-cite-137387"> <span id="dsq-author-user-137387">Steve J</span> </cite></div><div id="dsq-comment-body-137387" class="dsq-comment-body"><div id="dsq-comment-message-137387" class="dsq-comment-message"><p>I am not sure why people say changing the spring config is not a code change. The bad part about changing the spring config file is that it is not under unit test so there is no easy to tell if you have broken anything&#8230;</p></div></div><ul class="children"><li class="comment even depth-4" id="dsq-comment-138032"><div id="dsq-comment-header-138032" class="dsq-comment-header"> <cite id="dsq-cite-138032"> <span id="dsq-author-user-138032">Alex</span> </cite></div><div id="dsq-comment-body-138032" class="dsq-comment-body"><div id="dsq-comment-message-138032" class="dsq-comment-message"><p>Assuming you define (needs to be the same, because product owner said so) and call the output.generateOutput in more than one class, if you need to change to Csv you will have to modify 2 or more classes, instead of 1 xml file. Low Coupling is also defined by extensibility, not only by what your source code looks like at the moment.</p></div></div></li><li class="comment odd alt depth-4" id="dsq-comment-138788"><div id="dsq-comment-header-138788" class="dsq-comment-header"> <cite id="dsq-cite-138788"> http://www.readingcraze.com <span id="dsq-author-user-138788">Umer</span> </cite></div><div id="dsq-comment-body-138788" class="dsq-comment-body"><div id="dsq-comment-message-138788" class="dsq-comment-message"><p>Steve,</p><p>I have used my actual spring configuration file under my unit test case, all of my test code use actual spring configuration file, so If we have make incorrect changes in spring configuration , my test case start getting failed, but I also agree spring configration change is a &#8221; CHANGE &#8220;.</p></div></div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="dsq-comment-132704"><div id="dsq-comment-header-132704" class="dsq-comment-header"> <cite id="dsq-cite-132704"> http://www.simplecodestuffs.com <span id="dsq-author-user-132704">mohiadeen</span> </cite></div><div id="dsq-comment-body-132704" class="dsq-comment-body"><div id="dsq-comment-message-132704" class="dsq-comment-message"><p>Nice explanation . thanks :)</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-130618"><div id="dsq-comment-header-130618" class="dsq-comment-header"> <cite id="dsq-cite-130618"> <span id="dsq-author-user-130618">manisg</span> </cite></div><div id="dsq-comment-body-130618" class="dsq-comment-body"><div id="dsq-comment-message-130618" class="dsq-comment-message"><p>hjkhjk</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-128529"><div id="dsq-comment-header-128529" class="dsq-comment-header"> <cite id="dsq-cite-128529"> <span id="dsq-author-user-128529">Ayaz</span> </cite></div><div id="dsq-comment-body-128529" class="dsq-comment-body"><div id="dsq-comment-message-128529" class="dsq-comment-message"><p>Its good tutorial but my question is it looks same just the difference is you placed bean.xml what if i want that both can be accessed by xml like csv and xml both. sory if my question is wrong because iam new in spring. but regular reader of your articles. Thanks</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-127855"><div id="dsq-comment-header-127855" class="dsq-comment-header"> <cite id="dsq-cite-127855"> <span id="dsq-author-user-127855">Abdul Gafoor</span> </cite></div><div id="dsq-comment-body-127855" class="dsq-comment-body"><div id="dsq-comment-message-127855" class="dsq-comment-message"><p>Excelent clarification&#8230;</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-127439"><div id="dsq-comment-header-127439" class="dsq-comment-header"> <cite id="dsq-cite-127439"> http://No <span id="dsq-author-user-127439">Selvakumar</span> </cite></div><div id="dsq-comment-body-127439" class="dsq-comment-body"><div id="dsq-comment-message-127439" class="dsq-comment-message"><p>cool Example</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-126623"><div id="dsq-comment-header-126623" class="dsq-comment-header"> <cite id="dsq-cite-126623"> http://mkyong.com <span id="dsq-author-user-126623">Rajpal Singh</span> </cite></div><div id="dsq-comment-body-126623" class="dsq-comment-body"><div id="dsq-comment-message-126623" class="dsq-comment-message"><p>Hello sir,</p><p>You said that when output changed, you need to modify the Spring XML file only.</p><p>Can you explain with example what type of code we change in the output.</p><p>Help me&#8230;..</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-132402"><div id="dsq-comment-header-132402" class="dsq-comment-header"> <cite id="dsq-cite-132402"> <span id="dsq-author-user-132402">Chandra Sekhar</span> </cite></div><div id="dsq-comment-body-132402" class="dsq-comment-body"><div id="dsq-comment-message-132402" class="dsq-comment-message"><p>As per the below configuration,</p><p>we are attaching a CsvOutputGenerator to the OutputHelper. If we want to attach JsonOutputGenerator, then we change the spring configuration as below:</p><p>Hope this clarifies ?</p></div></div></li></ul></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-125973"><div id="dsq-comment-header-125973" class="dsq-comment-header"> <cite id="dsq-cite-125973"> <span id="dsq-author-user-125973">Suri</span> </cite></div><div id="dsq-comment-body-125973" class="dsq-comment-body"><div id="dsq-comment-message-125973" class="dsq-comment-message"><p>I don&#8217;t get it. Instead of one helper class for each implementation, we are ending up with one spring config for each implementation. Is the advantage here the ability to execute implementation of choosing without re-compiling ?</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-125974"><div id="dsq-comment-header-125974" class="dsq-comment-header"> <cite id="dsq-cite-125974"> <span id="dsq-author-user-125974">Suri</span> </cite></div><div id="dsq-comment-body-125974" class="dsq-comment-body"><div id="dsq-comment-message-125974" class="dsq-comment-message"><p>Sorry ! spoke too soon. Very first comment and subsequent reply by Mr.Yong, made me believe I should be thinking differently. I am very glad I found this site Mr.Yong, Thank you.</p></div></div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-125171"><div id="dsq-comment-header-125171" class="dsq-comment-header"> <cite id="dsq-cite-125171"> http://<a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="d9aaabb0b2ede9ed99beb4b8b0b5f7bab6b4">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> <span id="dsq-author-user-125171">Srikanth</span> </cite></div><div id="dsq-comment-body-125171" class="dsq-comment-body"><div id="dsq-comment-message-125171" class="dsq-comment-message"><p>Really useful&#8230;.keep posting like these&#8230;</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-122311"><div id="dsq-comment-header-122311" class="dsq-comment-header"> <cite id="dsq-cite-122311"> <span id="dsq-author-user-122311">Rajesh Kumar</span> </cite></div><div id="dsq-comment-body-122311" class="dsq-comment-body"><div id="dsq-comment-message-122311" class="dsq-comment-message"><p>Nice, precise and clear information. Thanks.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-117147"><div id="dsq-comment-header-117147" class="dsq-comment-header"> <cite id="dsq-cite-117147"> <span id="dsq-author-user-117147">Trivi</span> </cite></div><div id="dsq-comment-body-117147" class="dsq-comment-body"><div id="dsq-comment-message-117147" class="dsq-comment-message"><p>Hi mkyong,</p><p>Great help to the java community, best regards.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-85925"><div id="dsq-comment-header-85925" class="dsq-comment-header"> <cite id="dsq-cite-85925"> <span id="dsq-author-user-85925">Suyog</span> </cite></div><div id="dsq-comment-body-85925" class="dsq-comment-body"><div id="dsq-comment-message-85925" class="dsq-comment-message"><p>can anyone tell me what is the difference between  ApplicationContext and BeanFactory</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"> ApplicationContext context <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> ClassPathXmlApplicationContext<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span><span style="color: #009900;">&#123;</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span>context.<span style="color: #006633;">xml</span><span style="color: #339933;">&amp;</span>quot<span style="color: #339933;">;</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"> BeanFactory context <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> ClassPathXmlApplicationContext<span style="color: #009900;">&#40;</span>context.<span style="color: #006633;">xml</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-85641"><div id="dsq-comment-header-85641" class="dsq-comment-header"> <cite id="dsq-cite-85641"> <span id="dsq-author-user-85641">Suyog</span> </cite></div><div id="dsq-comment-body-85641" class="dsq-comment-body"><div id="dsq-comment-message-85641" class="dsq-comment-message"><p>// this is for CsvOutputGenerator but what to do if i want both CsvOutputGenerator and sonOutputGenerator<br /> //can  i write like this</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-85748"><div id="dsq-comment-header-85748" class="dsq-comment-header"> <cite id="dsq-cite-85748"> <span id="dsq-author-user-85748">TestConfig</span> </cite></div><div id="dsq-comment-body-85748" class="dsq-comment-body"><div id="dsq-comment-message-85748" class="dsq-comment-message"><p>call like this</p><p>OutputHelper output = (OutputHelper)context.getBean(&#8220;OutputHelper&#8221;);<br /> output.generateOutput();</p><p> OutputHelper output1 = (OutputHelper)context.getBean(&#8220;OutputHelper1&#8243;);<br /> output1.generateOutput();</p></div></div><ul class="children"><li class="comment odd alt depth-3" id="dsq-comment-122772"><div id="dsq-comment-header-122772" class="dsq-comment-header"> <cite id="dsq-cite-122772"> <span id="dsq-author-user-122772">pizero</span> </cite></div><div id="dsq-comment-body-122772" class="dsq-comment-body"><div id="dsq-comment-message-122772" class="dsq-comment-message"><p>:)))<br /> output, output1, outputhelper, outputhelper1 &#8230;.. :)))</p><p>so all of you think that naming variables like a1, a2, a3 and so on<br /> is elegant and readable?</p><p>very interesting &#8230;.</p></div></div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="dsq-comment-85187"><div id="dsq-comment-header-85187" class="dsq-comment-header"> <cite id="dsq-cite-85187"> <span id="dsq-author-user-85187">Muhammad Amjad</span> </cite></div><div id="dsq-comment-body-85187" class="dsq-comment-body"><div id="dsq-comment-message-85187" class="dsq-comment-message"><p>Excellent Document, Or i can say excellent website, Each step is explained in detail and we can easily understand the stuff</p><p>Welldone Mr. Mkyong</p></div></div><ul class="children"><li class="comment byuser comment-author-mkyong bypostauthor odd alt depth-2" id="dsq-comment-85211"><div id="dsq-comment-header-85211" class="dsq-comment-header"> <cite id="dsq-cite-85211"> http://www.mkyong.com <span id="dsq-author-user-85211">mkyong</span> </cite></div><div id="dsq-comment-body-85211" class="dsq-comment-body"><div id="dsq-comment-message-85211" class="dsq-comment-message"><p>Thanks for your kind words.</p></div></div></li><li class="comment even depth-2" id="dsq-comment-123435"><div id="dsq-comment-header-123435" class="dsq-comment-header"> <cite id="dsq-cite-123435"> <span id="dsq-author-user-123435">Shawn C</span> </cite></div><div id="dsq-comment-body-123435" class="dsq-comment-body"><div id="dsq-comment-message-123435" class="dsq-comment-message"><p>totally agree ! excellent work !</p></div></div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-84937"><div id="dsq-comment-header-84937" class="dsq-comment-header"> <cite id="dsq-cite-84937"> <span id="dsq-author-user-84937">sreenivas</span> </cite></div><div id="dsq-comment-body-84937" class="dsq-comment-body"><div id="dsq-comment-message-84937" class="dsq-comment-message"><p>neat and clean explaination&#8230;. thanks a lot boss !!!!!!!!!</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-84935"><div id="dsq-comment-header-84935" class="dsq-comment-header"> <cite id="dsq-cite-84935"> <span id="dsq-author-user-84935">sreenivas</span> </cite></div><div id="dsq-comment-body-84935" class="dsq-comment-body"><div id="dsq-comment-message-84935" class="dsq-comment-message"><p>Very good explaination&#8230;.. Thanks alot&#8230;</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-84746"><div id="dsq-comment-header-84746" class="dsq-comment-header"> <cite id="dsq-cite-84746"> <span id="dsq-author-user-84746">Azhar</span> </cite></div><div id="dsq-comment-body-84746" class="dsq-comment-body"><div id="dsq-comment-message-84746" class="dsq-comment-message"><p>Cool example,</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-84512"><div id="dsq-comment-header-84512" class="dsq-comment-header"> <cite id="dsq-cite-84512"> <span id="dsq-author-user-84512">atul</span> </cite></div><div id="dsq-comment-body-84512" class="dsq-comment-body"><div id="dsq-comment-message-84512" class="dsq-comment-message"><p>really great job.</p><p>Thank you !<br /> Atul</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-84399"><div id="dsq-comment-header-84399" class="dsq-comment-header"> <cite id="dsq-cite-84399"> <span id="dsq-author-user-84399">suresh</span> </cite></div><div id="dsq-comment-body-84399" class="dsq-comment-body"><div id="dsq-comment-message-84399" class="dsq-comment-message"><p>Thanks for good Explanation&#8230;</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-83798"><div id="dsq-comment-header-83798" class="dsq-comment-header"> <cite id="dsq-cite-83798"> <span id="dsq-author-user-83798">java_sridhar</span> </cite></div><div id="dsq-comment-body-83798" class="dsq-comment-body"><div id="dsq-comment-message-83798" class="dsq-comment-message"><p>good explanation.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-83735"><div id="dsq-comment-header-83735" class="dsq-comment-header"> <cite id="dsq-cite-83735"> <span id="dsq-author-user-83735">Siddhraj Atodaria</span> </cite></div><div id="dsq-comment-body-83735" class="dsq-comment-body"><div id="dsq-comment-message-83735" class="dsq-comment-message"><div class="wp_syntax"><div class="code"><pre class="language" style="font-family:monospace;"> Thanks Bro</pre></div></div></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-83734"><div id="dsq-comment-header-83734" class="dsq-comment-header"> <cite id="dsq-cite-83734"> <span id="dsq-author-user-83734">Siddhraj Atodaria</span> </cite></div><div id="dsq-comment-body-83734" class="dsq-comment-body"><div id="dsq-comment-message-83734" class="dsq-comment-message"><p>Thanks Bro,</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-83663"><div id="dsq-comment-header-83663" class="dsq-comment-header"> <cite id="dsq-cite-83663"> http://emrpms.blogspot.in/ <span id="dsq-author-user-83663">Senthil</span> </cite></div><div id="dsq-comment-body-83663" class="dsq-comment-body"><div id="dsq-comment-message-83663" class="dsq-comment-message"><p>Good Article. But still i am new to java world, so still  i am not convinced why need this spring service layer. In the above examples, you have mentioned that</p><p>&#8220;every change of output generator may involve code change. If this code is scatter over all of your project, every change of the output generator will make you suffer seriously. &#8221;</p><p>But if you could improve your example with change happen with service layer and without service layer, then it would be great</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-83636"><div id="dsq-comment-header-83636" class="dsq-comment-header"> <cite id="dsq-cite-83636"> <span id="dsq-author-user-83636">Beniton</span> </cite></div><div id="dsq-comment-body-83636" class="dsq-comment-body"><div id="dsq-comment-message-83636" class="dsq-comment-message"><p>Excellent</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-83130"><div id="dsq-comment-header-83130" class="dsq-comment-header"> <cite id="dsq-cite-83130"> <span id="dsq-author-user-83130">Bonus</span> </cite></div><div id="dsq-comment-body-83130" class="dsq-comment-body"><div id="dsq-comment-message-83130" class="dsq-comment-message"><p>Thank you very much. Great Example of loosely coupling.<br /> First time I got it right.<br /> Great tutorial.</p><p>Regards!!!</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://www.java-forums.org/struts/52985-what-difference-between-loosly-coupling-tightly-coupling.html#post257330' rel='external nofollow' class='url'>what is the difference between loosly coupling and tightly coupling?</a></p></li></li><li class="comment even thread-even depth-1" id="dsq-comment-73446"><div id="dsq-comment-header-73446" class="dsq-comment-header"> <cite id="dsq-cite-73446"> <span id="dsq-author-user-73446">Shyam</span> </cite></div><div id="dsq-comment-body-73446" class="dsq-comment-body"><div id="dsq-comment-message-73446" class="dsq-comment-message"><p>Hi Mkyong,</p><p>Thanks for explaining spring programaticaly which one I was looking for long time.</p><p>I think you have missed one return time in the Helper class.Could you please look into that.Here is the code.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"> <span style="color: #000000; font-weight: bold;">public</span> OutputHelper<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
		outputGenerator <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> CsvOutputGenerator<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span></pre></div></div><p>Thanks,<br /> Shyam</p></div></div><ul class="children"><li class="comment byuser comment-author-mkyong bypostauthor odd alt depth-2" id="dsq-comment-73472"><div id="dsq-comment-header-73472" class="dsq-comment-header"> <cite id="dsq-cite-73472"> http://www.mkyong.com <span id="dsq-author-user-73472">mkyong</span> </cite></div><div id="dsq-comment-body-73472" class="dsq-comment-body"><div id="dsq-comment-message-73472" class="dsq-comment-message"><p>Sorry, i don&#8217;t get you?</p></div></div></li><li class="comment even depth-2" id="dsq-comment-76957"><div id="dsq-comment-header-76957" class="dsq-comment-header"> <cite id="dsq-cite-76957"> <span id="dsq-author-user-76957">Tim</span> </cite></div><div id="dsq-comment-body-76957" class="dsq-comment-body"><div id="dsq-comment-message-76957" class="dsq-comment-message"><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">public</span> OutputHelper<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#123;</span>
    outputGenerator <span style="color: #339933;">=</span> <span style="color: #000000; font-weight: bold;">new</span> CsvOutputGenerator<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>This is a Constructor, which does not return.</p></div></div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-46704"><div id="dsq-comment-header-46704" class="dsq-comment-header"> <cite id="dsq-cite-46704"> <span id="dsq-author-user-46704">Arvind</span> </cite></div><div id="dsq-comment-body-46704" class="dsq-comment-body"><div id="dsq-comment-message-46704" class="dsq-comment-message"><p>Hi Mkyong,</p><p>Great posts! I found explainations are to the point, no verbose. great resource for young developers.</p><p>I appreciate your selfless effort</p></div></div><ul class="children"><li class="comment byuser comment-author-mkyong bypostauthor even depth-2" id="dsq-comment-46753"><div id="dsq-comment-header-46753" class="dsq-comment-header"> <cite id="dsq-cite-46753"> http://www.mkyong.com <span id="dsq-author-user-46753">mkyong</span> </cite></div><div id="dsq-comment-body-46753" class="dsq-comment-body"><div id="dsq-comment-message-46753" class="dsq-comment-message"><p>sharing is one of the great way to improve :)</p></div></div><ul class="children"><li class="comment odd alt depth-3" id="dsq-comment-47576"><div id="dsq-comment-header-47576" class="dsq-comment-header"> <cite id="dsq-cite-47576"> <span id="dsq-author-user-47576">sam</span> </cite></div><div id="dsq-comment-body-47576" class="dsq-comment-body"><div id="dsq-comment-message-47576" class="dsq-comment-message"><p>Can you provide material about web services&#8230;thank you.</p></div></div></li><li class="comment even depth-3" id="dsq-comment-75777"><div id="dsq-comment-header-75777" class="dsq-comment-header"> <cite id="dsq-cite-75777"> <span id="dsq-author-user-75777">alioune</span> </cite></div><div id="dsq-comment-body-75777" class="dsq-comment-body"><div id="dsq-comment-message-75777" class="dsq-comment-message"><p>greatfull tutorial.<br /> I&#8217;m very happy to meet this one.<br /> thank&#8217;s you very mutch</p></div></div></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-46693"><div id="dsq-comment-header-46693" class="dsq-comment-header"> <cite id="dsq-cite-46693"> <span id="dsq-author-user-46693">Raghu</span> </cite></div><div id="dsq-comment-body-46693" class="dsq-comment-body"><div id="dsq-comment-message-46693" class="dsq-comment-message"><p>Hi Mkyong,</p><p>Nice tutorial, Thanks.</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-18329"><div id="dsq-comment-header-18329" class="dsq-comment-header"> <cite id="dsq-cite-18329"> <span id="dsq-author-user-18329">Halbert</span> </cite></div><div id="dsq-comment-body-18329" class="dsq-comment-body"><div id="dsq-comment-message-18329" class="dsq-comment-message"><p>Hi..</p><p>This is why I haven&#8217;t touched Spring from the beginning it came out but now I got no choice since a project is required me to use it.</p><p>If we compare method 2 and method 3 above, actually the work load is the same. Both still have to do modification. Method 3 doesn&#8217;t need to change the code, but still need to change the XML. It&#8217;s more or less shifting the work to XML. And worse, the tightly coupled problem that we want to get rid of is now at the XML. So what&#8217;s the advantage? As the matter of fact, now we have added one more layer (Spring) which means more works, more memory, more CPU power, and more possible bugs introduced. And then when the project grows big, the XML file would be hard to be managed.</p><p>Just my 2 cents&#8230; care to share your view?</p><p>p.s. Btw, thanks for the tutorials. Still going thru them as of this msg is being posted.</p></div></div><ul class="children"><li class="comment byuser comment-author-mkyong bypostauthor odd alt depth-2" id="dsq-comment-18344"><div id="dsq-comment-header-18344" class="dsq-comment-header"> <cite id="dsq-cite-18344"> http://www.mkyong.com <span id="dsq-author-user-18344">mkyong</span> </cite></div><div id="dsq-comment-body-18344" class="dsq-comment-body"><div id="dsq-comment-message-18344" class="dsq-comment-message"><p>Dependency injection (DI) is a design pattern, that&#8217;s used to solve the common tightly components coupled issue, just Spring makes DI very easy to implement.</p><p>In a large project or multiple developers involved, the best practice is always providing the interface to the client, so that any changes in the implementation class will not require to change at the client side.</p><p>In method 2, if you want to change the outputGenerator, you have to modify the helper class, and any code changed may cause some new potential bugs as well (especially for junior developer). The best practice is always minimal the code change as little as possible, avoid is better. Furthermore, when the helper class grows bigger, not every developer has enough confidence to make a simple change and commit the code :)</p><p>In method 3, if you want to change the outputGenerator, you can just create a new implementation class and inject into your interface via XML, no code is modified, and you can roll back your code easily. The workload may be similar, but the flexibility and maintainability should take it into consideration. For anti-XML person, you can use Spring annotations to auto wire the implementation class.</p><p><em>&#8220;added one more layer (Spring) which means more works, more memory, more CPU power, and more possible bugs introduced&#8221;</em><br /> More work at initial development, but less work in future. More memory or CPU power, may be, but for years of Spring development, i just do not feel there are any serious performance impact. More bugs? Definitely no, Spring is a mature and successful framework, there shouldn&#8217;t any critical bug itself, it&#8217;s more on how developer using it.</p><p><em>&#8220;And then when the project grows big, the XML file would be hard to be managed.&#8221;</em><br /> When the project grow big, you may more harder to find your helper class :). In addition, when project grow big, so does helper class, often times, you just do not wish to change a single line of a &#8220;big&#8221; class. Let say, your senior is left company, you have to take over his job, will you rather make change in a unknown &#8220;big&#8221; class or make a single change in XML file? Just an example.</p><p>During initial development, you may feel why you need Spring? Why added one more layer? The benefits will be obvious when the user requirement has kept changing (It&#8217;s always, never end! No matter you are using agile development or waterfall, sad&#8230;but true) or doing maintenance in future.</p><p>Hope my scenarios are not misleading or confuse you :), try consulting the Spring&#8217;s book titled &#8220;Spring Recipe&#8221; for more Spring explanation. Hope helps.</p></div></div><ul class="children"><li class="comment even depth-3" id="dsq-comment-46996"><div id="dsq-comment-header-46996" class="dsq-comment-header"> <cite id="dsq-cite-46996"> <span id="dsq-author-user-46996">anil</span> </cite></div><div id="dsq-comment-body-46996" class="dsq-comment-body"><div id="dsq-comment-message-46996" class="dsq-comment-message"><p>Good Discussion on Spring IOC . Clears my doubts .</p></div></div></li><li class="comment odd alt depth-3" id="dsq-comment-83736"><div id="dsq-comment-header-83736" class="dsq-comment-header"> <cite id="dsq-cite-83736"> <span id="dsq-author-user-83736">Siddhraj Atodaria</span> </cite></div><div id="dsq-comment-body-83736" class="dsq-comment-body"><div id="dsq-comment-message-83736" class="dsq-comment-message"><p>good</p></div></div></li><li class="comment even depth-3" id="dsq-comment-84028"><div id="dsq-comment-header-84028" class="dsq-comment-header"> <cite id="dsq-cite-84028"> <span id="dsq-author-user-84028">lakshmi</span> </cite></div><div id="dsq-comment-body-84028" class="dsq-comment-body"><div id="dsq-comment-message-84028" class="dsq-comment-message"><p>Excellent explanation.</p><p>Thanks</p></div></div></li><li class="comment odd alt depth-3" id="dsq-comment-85279"><div id="dsq-comment-header-85279" class="dsq-comment-header"> <cite id="dsq-cite-85279"> <span id="dsq-author-user-85279">Dinesh Ram</span> </cite></div><div id="dsq-comment-body-85279" class="dsq-comment-body"><div id="dsq-comment-message-85279" class="dsq-comment-message"><p>Hi Sir,<br /> Thanks for your good explanation. But I am not clear  &#8220;“every change of output generator may involve code change. If this code is scatter over all of your project, every change of the output generator will make you suffer seriously.”</p><p>Method1:<br /> In &#8220;CsvOutputGenerator&#8221; class if i am changing the method name as well as need to change the calling method of name in &#8220;App&#8221; class.</p><p>Method 3:<br /> But  If i use spring no need to modify the method name(generateOutput()) in implementation class whether modification required concentrate on XML file. Even though I am calling same &#8220;CsvOutputGenerator&#8221; class from  &#8220;App&#8221; class. How?<br /> So,Why no need of modification in App class?</p><p>Please anyone clear my doubts.</p></div></div></li><li class="comment even depth-3" id="dsq-comment-121937"><div id="dsq-comment-header-121937" class="dsq-comment-header"> <cite id="dsq-cite-121937"> <span id="dsq-author-user-121937">sravan</span> </cite></div><div id="dsq-comment-body-121937" class="dsq-comment-body"><div id="dsq-comment-message-121937" class="dsq-comment-message"><p>gud explanation sir</p></div></div></li><li class="comment odd alt depth-3" id="dsq-comment-128038"><div id="dsq-comment-header-128038" class="dsq-comment-header"> <cite id="dsq-cite-128038"> <span id="dsq-author-user-128038">Atul</span> </cite></div><div id="dsq-comment-body-128038" class="dsq-comment-body"><div id="dsq-comment-message-128038" class="dsq-comment-message"><p>I m exactly with Halbert on this one. With the rush to adopt the buzzword of &#8216;dependency injection&#8217;, few have actually quantified the ROI on refactoring or even architecting a new application with DI front and center.<br /> I do understand the need for loose coupling, when applied in context of OO programming, which is to achieve maximum reusability of the code(objects).<br /> As far as DI goes, from my personal experience, the advantages of changing a helper vs changing an XML doc are overblown. First off, I like changing helper as any typo would be caught immediately at compile time by any mordern IDE, while detecting any such error in XML has to defer till runtime. Secondly, you can break your helper into separate logical classes to avoid it being a humungous unmanageable class.<br /> I believe DI would be using Reflections under covers to instantiate objects to inject, reflections in one of the costliest functionality in Java with performace overhead.<br /> Only advantage I can think of is that if you somehow take the XML config file out of the EAR/WAR, then you don&#8217;t need to break jar/recompile app, but can change the application on the fly based on the requirement, but usually Spring XML config is packaged within the app.<br /> That being said I feel I am wrong but still need some convincing..</p></div></div></li></ul></li><li class="comment even depth-2" id="dsq-comment-138789"><div id="dsq-comment-header-138789" class="dsq-comment-header"> <cite id="dsq-cite-138789"> http://www.readingcraze.com <span id="dsq-author-user-138789">Umer</span> </cite></div><div id="dsq-comment-body-138789" class="dsq-comment-body"><div id="dsq-comment-message-138789" class="dsq-comment-message"><p>I think there is one big part you are missing, the managing application become easier, we have one project which we have been working 3/4 years, we have 3/4 xml configuration all classes, their properties is in one xml file. Its very easy to manage them.</p></div></div></li></ul></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/tutorials/spring-tutorials/' rel='external nofollow' class='url'>Spring Tutorials | J2EE Web Development Tutorials</a></p></li></li><li class="post pingback"><p>Pingback: <a href='http://www.inpurplish.com/?p=1610' rel='external nofollow' class='url'>Falling in Love: A Natural Progression | InPurplish</a></p></li></li></ul></div></div><script type="text/javascript">/*<![CDATA[*/var disqus_url='http://www.mkyong.com/spring/spring-loosely-coupled-example/';var disqus_identifier='3619 http://www.mkyong.com/?p=3619';var disqus_container_id='disqus_thread';var disqus_domain='disqus.com';var disqus_shortname='mkyong';var disqus_title="Spring loosely coupled example";var disqus_config=function(){var config=this;config.language='';config.callbacks.preData.push(function(){document.getElementById(disqus_container_id).innerHTML='';});config.callbacks.onReady.push(function(){var script=document.createElement('script');script.async=true;script.src='?cf_action=sync_comments&post_id=3619';var firstScript=document.getElementsByTagName("script")[0];firstScript.parentNode.insertBefore(script,firstScript);});};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/var DsqLocal={'trackbacks':[{'author_name':"Falling in Love: A Natural Progression | InPurplish",'author_url':"http:\/\/www.inpurplish.com\/?p=1610",'date':"03\/03\/2010 05:55 PM",'excerpt':"[...] Spring loosely coupled example | Spring [...] ",'type':"pingback"},{'author_name':"Spring Tutorials | J2EE Web Development Tutorials",'author_url':"http:\/\/www.mkyong.com\/tutorials\/spring-tutorials\/",'date':"05\/26\/2010 01:19 PM",'excerpt':"[...] Spring loosely coupled example An output generator example to develop with 3 methods, call it directly, via helper class &hellip;",'type':"pingback"},{'author_name':"what is the difference between loosly coupling and tightly coupling?",'author_url':"http:\/\/www.java-forums.org\/struts\/52985-what-difference-between-loosly-coupling-tightly-coupling.html#post257330",'date':"01\/10\/2012 12:19 PM",'excerpt':"[...] to the code whereas loosely coupled requires changes to the configuration files. A good example Spring loosely coupled example &hellip;",'type':"pingback"}],'trackback_url':"http:\/\/www.mkyong.com\/spring\/spring-loosely-coupled-example\/trackback\/"};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/(function(){var dsq=document.createElement('script');dsq.type='text/javascript';dsq.async=true;dsq.src='//'+disqus_shortname+'.'+'disqus.com'+'/embed.js?pname=wordpress&pver=2.74';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(dsq);})();/*]]>*/</script></div></div><!-- google_ad_section_end --></div><div class="span4"><div id="sidebar"><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7072877400" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="5738517670" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" id="sidebar-fb"><div class='dd-loading' id='dd-fbpage'></div><iframe id='dd-fbpage-iframe' src='' height='0' width='0' scrolling='no' frameborder='0' style="border:none;overflow:hidden;" allowTransparency="true" ></iframe></div><div class="sidebar-ads"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="300x250" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><h2>Recent Posts</h2><div class="block"><ul><li><img width="32" height="17" src="http://www.mkyong.com/wp-content/uploads/2014/07/jsf-log4j-logo-150x80.jpg" class="attachment-32x32 wp-post-image" alt="jsf log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/jsf2/jsf-2-log4j-integration-example/">JSF 2 + Log4j Integration Example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-hello-world-example/">Log4j hello world example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-xml-example/">log4j.xml Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-annotation-example/">Spring Security + Hibernate Annotation Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/">Spring Security + Hibernate XML Example </a></div><div class="clearboth"></div></li></ul></div><h2>Popular Tutorials</h2><div class="block"><ul><li><img width="29" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/03/android.png" class="attachment-32x32 wp-post-image" alt="android" /><div class="rt-label"><a rel="tooltip" title="Created : 2012-03-22 14:48:53" href="http://www.mkyong.com/tutorials/android-tutorial/">Android Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/jsf2-logo.png" class="attachment-32x32 wp-post-image" alt="jsf2-logo" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-12-12 10:56:54" href="http://www.mkyong.com/tutorials/jsf-2-0-tutorials/">JSF 2.0 Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/04/Spring-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Spring tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-04-01 11:09:26" href="http://www.mkyong.com/tutorials/spring-tutorials/">Spring Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/maven-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Maven tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:24:51" href="http://www.mkyong.com/tutorials/maven-tutorials/">Maven Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/Hibernate-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Hibernate tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:18:30" href="http://www.mkyong.com/tutorials/hibernate-tutorials/">Hibernate Tutorial </a></div><div class="clearboth"></div></li></ul></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:600px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7953295395" data-ad-region = "mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" style="text-align: center"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="160x600" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div></div></div> <script type='text/javascript'>var _wpcf7={"loaderUrl":"http:\/\/www.mkyong.com\/wp-content\/plugins\/contact-form-7\/images\/ajax-loader.gif","sending":"Sending ...","cached":"1"};</script><footer><div id="footer-container"><div class="container"><div class="row"><div class="span4" id="footer-all-tut"><h3>All Available Tutorials</h3><ul class="unstyled"><li>Java Core Technologies :<div> <a href="/tutorials/java-io-tutorials/">Java I/O</a>, <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a>, <a href="/tutorials/java-xml-tutorials/">Java XML</a>, <a href="/tutorials/java-json-tutorials/">Java JSON</a>, <a href="/tutorials/jdbc-tutorials/">JDBC</a>, <a href="/category/java/">Java Misc</a></div></li><li>J2EE Frameworks :<div> <a href="/tutorials/hibernate-tutorials/">Hibernate</a>, <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a>, <a href="/tutorials/spring-tutorials/">Spring Core</a>, <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a>, <a href="/tutorials/spring-security-tutorials/">Spring Security</a>, <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a>, <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a><a href="/tutorials/wicket-tutorials/">Apache Wicket</a>, <a href="/tutorials/struts-tutorials/">Struts 1.x</a>, <a href="/tutorials/struts-2-tutorials/">Struts 2.x</a></div></li><li>Web Service :<div> <a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a>, <a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></div></li><li>Build Tools :<div> <a href="/tutorials/maven-tutorials/">Maven</a>, <a href="/tutorials/apache-archiva-tutorials/">Archiva</a></div></li><li>Unit Test Frameworks :<div> <a href="/tutorials/junit-tutorials/">jUnit</a>, <a href="/tutorials/testng-tutorials/">TestNG</a></div></li><li>Others :<div> <a href="/tutorials/android-tutorial/">Android</a>, <a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a>, <a href="/tutorials/jquery-tutorials/">jQuery</a>, <a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a>, <a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></div></li></ul></div><div class="span3"><h3>Favorites Links</h3><ul class="unstyled"><li><a href="http://developer.android.com/training/index.html" target="_blank" rel="nofollow">Android Getting Started</a></li><li><a href="https://developers.google.com/appengine/docs/java/gettingstarted/" target="_blank" rel="nofollow">Google App Engine - Java</a></li><li><a href="http://www.dzone.com/" target="_blank" rel="nofollow">DZone - Fresh Links</a></li><li><a href="http://docs.oracle.com/javaee/5/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 5 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 6 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/7/tutorial/doc/" target="_blank" rel="nofollow">Official Java EE 7 Tutorial</a></li><li><a href="http://docs.spring.io/spring/docs/2.5.x/reference/index.html" target="_blank" rel="nofollow">Spring 2.5.x documentation</a></li><li><a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/" target="_blank" rel="nofollow">Spring 3.2.x documentation</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/" target="_blank">Spring Security 3.2.x documentation</a></li><li><a href="http://docs.jboss.org/hibernate/core/4.3/manual/en-US/html_single/" target="_blank" rel="nofollow">Hibernate core 4.3 documentation</a></li><li><a href="http://download.oracle.com/javase/6/docs/api/overview-summary.html" target="_blank" rel="nofollow">Java SE 6.0 API documentation</a></li><li><a href="http://jsp.java.net/" target="_blank" rel="nofollow">JSP home page</a></li><li><a href="http://javaserverfaces.java.net/" target="_blank" rel="nofollow">JSF home page</a></li><li><a href="http://www.eclipse.org/downloads/" target="_blank" rel="nofollow">Eclipse IDE for Java developer</a></li><li><a href="http://struts.apache.org/release/1.3.x/userGuide/index.html" target="_blank" rel="nofollow">Struts 1.3.x documentation</a></li><li><a href="http://struts.apache.org/release/2.3.x/docs/home.html" target="_blank" rel="nofollow">Struts 2.3.x documentation</a></li><li><a href="http://maven.apache.org/" target="_blank" rel="nofollow">Maven home page</a></li><li><a href="http://search.maven.org/" target="_blank" rel="nofollow">Maven central repository Search</a></li><li><a href="http://ant.apache.org/" target="_blank" rel="nofollow">Ant home page</a></li><li><a href="http://jax-ws.java.net/" target="_blank" rel="nofollow">JAX-WS Official Website</a></li><li><a href="http://jersey.java.net/" target="_blank" rel="nofollow">JAX-RS Official Website (Jersey)</a></li></ul></div><div class="span3"><h3>Friends &amp; Links</h3><ul class="unstyled"><input type="hidden" name="activepost" id="activepost" value="3619" /><li><a href="http://www.javacodegeeks.com/" target="_blank">Java Code Geeks</a></li><li><a href="http://www.videophpblog.com" target="_blank">PHP Tutorials</a></li><li><a href="http://www.tenthofmarch.com/" target="_blank">TenthOfMarch</a></li><li><a href="http://www.web2secure.com" target="_blank">Web Security Blog</a></li><li><a href="http://www.fromdev.com" target="_blank">Web Development</a></li><li><a href="http://beust.com" target="_blank">Cédric Beust (TestNG)</a></li></ul></div><div class="span4"><h3>About Us</h3><p> Mkyong.com is a weblog dedicated to Java/J2EE developers and Web Developers. We constantly publish useful tricks, tutorials on J2EE or web development.</p><p> All examples are simple, easy to read, and full source code available, and of course well tested in our development environment.</p> <strong>We're Social</strong><ol><li>Twitter - <a href="http://twitter.com/#!/mkyong" target="_blank">Follow Me</a></li><li>Facebook - <a href="http://www.facebook.com/java.tutorial" target="_blank">Like Me</a></li><li>Google Plus - <a href="https://plus.google.com/110948163568945735692" target="_blank">Add Me</a></li><li>RSS - <a href="http://feeds.feedburner.com/FeedForMkyong" target="_blank">Subscribe Me</a></li></ol></div></div></div></div><div id="footer-copyright"><div class="container"> Copyright &copy; 2008-2014 Mkyong.com, all rights reserved.</div></div></footer><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-752408-5','mkyong.com');ga('send','pageview');</script><script type='text/javascript'>function _dmBootstrap(file){var _dma=document.createElement('script');_dma.type='text/javascript';_dma.async=true;_dma.src=('https:'==document.location.protocol?'https://':'http://')+file;(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(_dma);}
function _dmFollowup(file){if(typeof DMAds==='undefined')_dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
(function(){_dmBootstrap('cdn1.DeveloperMedia.com/a.min.js');setTimeout(_dmFollowup,2000);})();</script><script type="text/javascript" src="/wp-content/themes/mkyong-ma/js/core-latest.js?v=2013"></script><script type="text/javascript">function w3tc_load_js(u){var d=document,p=d.getElementsByTagName('HEAD')[0],c=d.createElement('script');c.type='text/javascript';c.src=u;p.appendChild(c);}</script><script type="text/javascript">w3tc_load_js('http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include-footer.15c8b4.js');</script></body></html>