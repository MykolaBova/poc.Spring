<!DOCTYPE html><html lang="en"><title>Spring Auto scanning components</title><head><link rel="stylesheet" type="text/css" href="http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include.b22e3d.css" media="all" /><meta name="generator" content="WordPress 3.5.1" /><meta name="google-site-verification" content="VsVvSTVAouAluNodWeR30BeIWTr4c84HvN4Fn9WBsak" /><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="shortcut icon" href="/wp-content/themes/mkyong-ma/images/favicon.ico" /><script type='text/javascript' src='http://www.mkyong.com/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script><link rel='prev' title='Maven + Spring + Hibernate + MySql Example' href='http://www.mkyong.com/spring/maven-spring-hibernate-mysql-example/' /><link rel='next' title='Spring Filter components in auto scanning' href='http://www.mkyong.com/spring/spring-filtering-components-in-auto-scanning/' /><link rel='shortlink' href='http://www.mkyong.com/?p=3854' /><meta name="keywords" content="spring" /><link rel="canonical" href="http://www.mkyong.com/spring/spring-auto-scanning-components/" /></head><body><div id="header-top"><div class="container"><div id="header-top-container"><ul><li><a href="/advertise-on-mkyong/" rel="nofollow">Advertise</a></li><li><a href="/contact-mkyong/" rel="nofollow">Contact Us</a></li><li><a href="/write-for-us/" rel="nofollow">Write For Us</a></li><li> <a href="http://feeds.feedburner.com/FeedForMkyong" rel="nofollow" title="RSS feed">RSS feed</a></li><li><a href="/blog/donate-to-charity/" rel="nofollow">Donate</a></li></ul></div></div></div><div id="header"><div class="container"><div id="header-logo"> <a href="/" title="mkyong.com"><div id="logo" ></div> </a></div><div id="header-banner"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div><div id="menu"><div class="container"><ul><li class="menu-allround"> <a href="/">Home</a></li><li class="menu-allround"> <a href="/all-tutorials-on-mkyong-com/">All Tutorials</a></li><li class="menu-topround"> <a href="#">Java Core</a><div id="java-menu" class="dropdown"><div class="tut-title">Java Core Tutorials</div><div class="dropdown-item"> <a href="/tag/java/"><div class="images img-border img-java img-holder"></div> </a><div>1. <a href="/tutorials/java-io-tutorials/">Java I/O</a></div><div>2. <a href="/tutorials/java-xml-tutorials/">Java XML</a></div><div>3. <a href="/tutorials/java-json-tutorials/">Java JSON</a></div><div>4. <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a></div><div>5. <a href="/tutorials/jdbc-tutorials/">JDBC</a></div><div>6. <a href="/tag/java/">Java Misc</a></div></div></div></li><li class="menu-topround"> <a href="#">JSF</a><div id="jsf-menu" class="dropdown"><div class="tut-title">JSF Tutorials</div><div class="dropdown-item"><a href="/tutorials/jsf-2-0-tutorials/"><div class="images img-border img-jsf2 img-holder"></div> </a><div>1. <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a></div></div></div></li><li class="menu-topround"> <a href="#">Spring</a><div id="spring-menu" class="dropdown"><div class="tut-title">Spring Tutorials</div><div class="dropdown-item"> <a href="/tutorials/spring-tutorials/"><div class="images img-border img-spring img-holder"></div> </a><div>1. <a href="/tutorials/spring-tutorials/">Spring Core</a></div><div>2. <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a></div><div>3. <a href="/tutorials/spring-security-tutorials/">Spring Security</a></div><div>4. <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a></div><div>5. <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a></div></div></div></li><li class="menu-topround"> <a href="#">Hibernate</a><div id="hibernate-menu" class="dropdown"><div class="tut-title">Hibernate Tutorials</div><div class="dropdown-item"> <a href="/tutorials/hibernate-tutorials/"><div class="images img-border img-hibernate img-holder"></div> </a><div>1. <a href="/tutorials/hibernate-tutorials/">Hibernate Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Struts</a><div id="struts-menu" class="dropdown"><div class="tut-title">Struts Tutorials</div><div class="dropdown-item"><a href="/tutorials/struts-2-tutorials/"><div class="images img-border img-struts img-holder"></div> </a><div>1. <a href="/tutorials/struts-tutorials/">Struts 1</a></div><div>2. <a href="/tutorials/struts-2-tutorials/">Struts 2</a></div></div></div></li><li class="menu-topround"> <a href="#">Android</a><div id="android-menu" class="dropdown"><div class="tut-title">Android Tutorials</div><div class="dropdown-item"> <a href="/tutorials/android-tutorial/"><div class="images img-border img-android img-holder"></div> </a><div>1. <a href="/tutorials/android-tutorial/">Android Core</a></div></div></div></li><li class="menu-topround"> <a href="#">Others</a><div id="misc-menu" class="dropdown"><div class="dropdown-item"><ol><li><a href="/tutorials/wicket-tutorials/">Apache Wicket</a></li><li><a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a></li><li><a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></li><li><a href="/tutorials/maven-tutorials/">Maven</a></li><li><a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a></li><li><a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a></li><li><a href="/tutorials/junit-tutorials/">jUnit</a></li><li><a href="/tutorials/testng-tutorials/">TestNG</a></li><li><a href="/tutorials/jquery-tutorials/">jQuery</a></li><li><a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></li></ol></div></div></li></ul><div style="float:right;margin:4px 0"><form action="/search/" id="cse-search-box"><div> <input type="hidden" name="cx" value="partner-pub-2836379775501347:3714346998" /> <input type="hidden" name="cof" value="FORID:10" /> <input type="hidden" name="ie" value="UTF-8" /> <input type="text" name="q" size="30" style="height:20px;font-size:10pt;" /> <input type="submit" name="sa" value="Search" style="height:25px;"  /></div></form></div></div></div><div class="container"><div class="row"><div class="span10"><!-- google_ad_section_start(name=mkyongregion) --><div id="post-container"> <article class="post" id="post-3854"><header><h1> Spring Auto scanning components</h1><div class='post-meta'><div id="small-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=40&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div> Posted on <time datetime="2010-03-24T03:11:33+00:00">March 24, 2010</time><span> , &nbsp;&nbsp;&nbsp; Last modified : June 13, 2011 </span><div> By <a href="http://www.mkyong.com/author/mkyong/" rel="author">mkyong</a></div></div></div> </header><div class="post-content"><div id='dd_light_ajax_float'><div id='dd_content_wrap'><div class='dd_light_button'><div class='dd-loading' id='dd-google' ></div><div class='g-plusone' data-size='tall'></div></div><div class='dd_light_button'><div class='dd-loading' id='dd-fblike' ></div><iframe id='dd-fblike-iframe' src='' height='0' width='0' scrolling='no' frameborder='0'></iframe></div><div class='dd_light_button'><div class='dd-loading' id='dd-twitter' ></div><a href='https://twitter.com/share' class='twitter-share-button' data-via='mkyong' data-count='vertical'></a></div></div></div><p>Normally you declare all the beans or components in XML bean configuration file, so that Spring container can detect and register your beans or components. Actually, Spring is able to auto scan, detect and instantiate your beans from pre-defined project package, no more tedious beans declaration in in XML file.</p><p>Following is a simple Spring project, including a customer service and dao layer. Let&#8217;s explore the different between declare components manually and auto components scanning in Spring.</p><h4>1. Declares Components Manually</h4><p>See a normal way to declare a bean in Spring.</p><p>Normal bean.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.dao</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerDAO 
<span style="color: #009900;">&#123;</span>
	@Override
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> toString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;Hello , This is CustomerDAO&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>	
<span style="color: #009900;">&#125;</span></pre></div></div><p>DAO layer.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.services</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.customer.dao.CustomerDAO</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerService 
<span style="color: #009900;">&#123;</span>
	CustomerDAO customerDAO<span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000066; font-weight: bold;">void</span> setCustomerDAO<span style="color: #009900;">&#40;</span>CustomerDAO customerDAO<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">this</span>.<span style="color: #006633;">customerDAO</span> <span style="color: #339933;">=</span> customerDAO<span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
	@Override
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> toString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;CustomerService [customerDAO=&quot;</span> <span style="color: #339933;">+</span> customerDAO <span style="color: #339933;">+</span> <span style="color: #0000ff;">&quot;]&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>Bean configuration file (Spring-Customer.xml), a normal bean configuration in Spring.</p><div class="wp_syntax"><div class="code"><pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;beans</span> <span style="color: #000066;">xmlns</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xmlns:xsi</span>=<span style="color: #ff0000;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xsi:schemaLocation</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans</span>
<span style="color: #009900;">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;customerService&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.customer.services.CustomerService&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
		<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;property</span> <span style="color: #000066;">name</span>=<span style="color: #ff0000;">&quot;customerDAO&quot;</span> <span style="color: #000066;">ref</span>=<span style="color: #ff0000;">&quot;customerDAO&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/bean<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;bean</span> <span style="color: #000066;">id</span>=<span style="color: #ff0000;">&quot;customerDAO&quot;</span> <span style="color: #000066;">class</span>=<span style="color: #ff0000;">&quot;com.mkyong.customer.dao.CustomerDAO&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/beans<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.common</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.context.ApplicationContext</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.context.support.ClassPathXmlApplicationContext</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.customer.services.CustomerService</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> App 
<span style="color: #009900;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> main<span style="color: #009900;">&#40;</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> args <span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
    	ApplicationContext context <span style="color: #339933;">=</span> 
    	  <span style="color: #000000; font-weight: bold;">new</span> ClassPathXmlApplicationContext<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> <span style="color: #009900;">&#123;</span><span style="color: #0000ff;">&quot;Spring-Customer.xml&quot;</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    	CustomerService cust <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerService<span style="color: #009900;">&#41;</span>context.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerService&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>cust<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>output</p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">CustomerService <span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #007800;">customerDAO</span>=Hello , This is CustomerDAO<span style="color: #7a0874; font-weight: bold;">&#93;</span></pre></div></div><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7391621200" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>2. Auto Components Scanning</h4><p>Now, enable Spring auto component scanning features.</p><p>Annotate with <strong>@Component</strong> to indicate this is class is an auto scan component.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.dao</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.stereotype.Component</span><span style="color: #339933;">;</span>
&nbsp;
@<span style="color: #003399;">Component</span>
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerDAO 
<span style="color: #009900;">&#123;</span>
	@Override
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> toString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;Hello , This is CustomerDAO&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>	
<span style="color: #009900;">&#125;</span></pre></div></div><p>DAO layer, add <strong>@Component</strong> to indicate this is an auto scan component also.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.services</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.beans.factory.annotation.Autowired</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.stereotype.Component</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.customer.dao.CustomerDAO</span><span style="color: #339933;">;</span>
&nbsp;
@<span style="color: #003399;">Component</span>
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerService 
<span style="color: #009900;">&#123;</span>
	@Autowired
	CustomerDAO customerDAO<span style="color: #339933;">;</span>
&nbsp;
	@Override
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> toString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;CustomerService [customerDAO=&quot;</span> <span style="color: #339933;">+</span> customerDAO <span style="color: #339933;">+</span> <span style="color: #0000ff;">&quot;]&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>Put this &#8220;<code>context:component</code>&#8221; in bean configuration file, it means, enable auto scanning feature in Spring. The <strong>base-package</strong> is indicate where are your components stored, Spring will scan this folder and find out the bean (annotated with @Component) and register it in Spring container.</p><div class="wp_syntax"><div class="code"><pre class="xml" style="font-family:monospace;"><span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;beans</span> <span style="color: #000066;">xmlns</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xmlns:xsi</span>=<span style="color: #ff0000;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xmlns:context</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span style="color: #009900;">	<span style="color: #000066;">xsi:schemaLocation</span>=<span style="color: #ff0000;">&quot;http://www.springframework.org/schema/beans</span>
<span style="color: #009900;">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span>
<span style="color: #009900;">	http://www.springframework.org/schema/context</span>
<span style="color: #009900;">	http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;</span><span style="color: #000000; font-weight: bold;">&gt;</span></span>
&nbsp;
	<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;context:component-scan</span> <span style="color: #000066;">base-package</span>=<span style="color: #ff0000;">&quot;com.mkyong.customer&quot;</span> <span style="color: #000000; font-weight: bold;">/&gt;</span></span>
&nbsp;
<span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/beans<span style="color: #000000; font-weight: bold;">&gt;</span></span></span></pre></div></div><p>Run it</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.common</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.context.ApplicationContext</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.context.support.ClassPathXmlApplicationContext</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.customer.services.CustomerService</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> App 
<span style="color: #009900;">&#123;</span>
    <span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">static</span> <span style="color: #000066; font-weight: bold;">void</span> main<span style="color: #009900;">&#40;</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> args <span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#123;</span>
    	ApplicationContext context <span style="color: #339933;">=</span> 
    	   <span style="color: #000000; font-weight: bold;">new</span> ClassPathXmlApplicationContext<span style="color: #009900;">&#40;</span><span style="color: #000000; font-weight: bold;">new</span> <span style="color: #003399;">String</span><span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> <span style="color: #009900;">&#123;</span><span style="color: #0000ff;">&quot;Spring-AutoScan.xml&quot;</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    	CustomerService cust <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerService<span style="color: #009900;">&#41;</span>context.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerService&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    	<span style="color: #003399;">System</span>.<span style="color: #006633;">out</span>.<span style="color: #006633;">println</span><span style="color: #009900;">&#40;</span>cust<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></div></div><p>output</p><div class="wp_syntax"><div class="code"><pre class="bash" style="font-family:monospace;">CustomerService <span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #007800;">customerDAO</span>=Hello , This is CustomerDAO<span style="color: #7a0874; font-weight: bold;">&#93;</span></pre></div></div><p>This is how auto components scanning works in Spring.</p><div><div style="margin:20px 0;"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="3642936086" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><h4>Custom auto scan component name</h4><p>By default, Spring will lower case the first character of the component &#8211; from &#8216;CustomerService&#8217; to &#8216;customerService&#8217;. And you can retrieve this component with name &#8216;customerService&#8217;.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerService cust <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerService<span style="color: #009900;">&#41;</span>context.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;customerService&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><p>To create a custom name for component, you can put custom name like this :</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">@Service<span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;AAA&quot;</span><span style="color: #009900;">&#41;</span>
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerService 
...</pre></div></div><p>Now, you can retrieve it with this name &#8216;AAA&#8217;.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">	CustomerService cust <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span>CustomerService<span style="color: #009900;">&#41;</span>context.<span style="color: #006633;">getBean</span><span style="color: #009900;">&#40;</span><span style="color: #0000ff;">&quot;AAA&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></div></div><h3>Auto Components Scan Annotation Types</h3><p>In Spring 2.5, there are 4 types of auto components scan annotation types</p><ul><li>@Component &#8211; Indicates a auto scan component.</li><li>@Repository &#8211; Indicates DAO component in the persistence layer.</li><li>@Service &#8211; Indicates a Service component in the business layer.</li><li>@Controller &#8211; Indicates a controller component in the presentation layer.</li></ul><p>So, which one to use? It&#8217;s really doesn&#8217;t matter. Let see the source code of <code>@Repository</code>,<code>@Service</code> or <code>@Controller</code>.</p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;">@Target<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>ElementType.<span style="color: #006633;">TYPE</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span>
@Retention<span style="color: #009900;">&#40;</span>RetentionPolicy.<span style="color: #006633;">RUNTIME</span><span style="color: #009900;">&#41;</span>
@Documented
@<span style="color: #003399;">Component</span>
<span style="color: #000000; font-weight: bold;">public</span> @<span style="color: #000000; font-weight: bold;">interface</span> <span style="color: #003399;">Repository</span> <span style="color: #009900;">&#123;</span>
&nbsp;
	<span style="color: #003399;">String</span> value<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #000000; font-weight: bold;">default</span> <span style="color: #0000ff;">&quot;&quot;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><p>You will noticed that all <code>@Repository</code>,<code>@Service</code> or <code>@Controller</code> are annotated with <code>@Component</code>. So, can we use just @Component for all the components for auto scanning? Yes, you can, and Spring will auto scan all your components with @Component annotated.</p><p>It&#8217;s working fine, but not a good practice, for readability, you should always declare @Repository,@Service or @Controller for a specified layer to make your code more easier to read, as following :</p><p><em>DAO layer</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.dao</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.stereotype.Repository</span><span style="color: #339933;">;</span>
&nbsp;
@<span style="color: #003399;">Repository</span>
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerDAO 
<span style="color: #009900;">&#123;</span>
	@Override
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> toString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;Hello , This is CustomerDAO&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>	
<span style="color: #009900;">&#125;</span></pre></div></div><p><em>Service layer</em></p><div class="wp_syntax"><div class="code"><pre class="java" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">package</span> <span style="color: #006699;">com.mkyong.customer.services</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.beans.factory.annotation.Autowired</span><span style="color: #339933;">;</span>
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">org.springframework.stereotype.Service</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000000; font-weight: bold;">import</span> <span style="color: #006699;">com.mkyong.customer.dao.CustomerDAO</span><span style="color: #339933;">;</span>
&nbsp;
@Service
<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #000000; font-weight: bold;">class</span> CustomerService 
<span style="color: #009900;">&#123;</span>
	@Autowired
	CustomerDAO customerDAO<span style="color: #339933;">;</span>
&nbsp;
	@Override
	<span style="color: #000000; font-weight: bold;">public</span> <span style="color: #003399;">String</span> toString<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">return</span> <span style="color: #0000ff;">&quot;CustomerService [customerDAO=&quot;</span> <span style="color: #339933;">+</span> customerDAO <span style="color: #339933;">+</span> <span style="color: #0000ff;">&quot;]&quot;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
&nbsp;
<span style="color: #009900;">&#125;</span></pre></div></div><h4>Download Source Code</h4><div class="download"> Download it &#8211; <a href='http://www.mkyong.com/wp-content/uploads/2010/03/Spring-Auto-Scan-Component-Example.zip'>Spring-Auto-Scan-Component-Example.zip</a></div><div id="post-meta-extra"> Tags : <span class="post-tag"><a href="http://www.mkyong.com/tag/spring/" rel="tag">spring</a></span></div><div style="margin:20px 0;"><center><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7146814087" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></center></div><div id="author-info"><div id="big-author-avatar"> <img alt='' src='http://0.gravatar.com/avatar/622c70d2908e68ecc070ca6754245bb2?s=100&amp;d=http%3A%2F%2Fwww.mkyong.com%2Fwp-content%2Fthemes%2Fmkyongnew%2Fimages%2Favatar-guest.jpg%3Fs%3D100&amp;r=G' class='avatar avatar-100 photo' height='100' width='100' /></div><div id="author-description"><div id="author-link"> <a href="http://www.mkyong.com/author/mkyong/" rel="author"> mkyong </a></div> Founder of Mkyong.com, love Java and open source stuff. Follow him on <a href="https://twitter.com/mkyong">Twitter</a>, or befriend him on <a href="http://www.facebook.com/java.tutorial">Facebook</a> or <a href="https://plus.google.com/110948163568945735692?rel=author">Google Plus</a>. If you like my tutorials, consider making a <a href="http://www.mkyong.com/blog/donate-to-charity/">donation to the charity</a>, thanks.</div><div class="clearboth"></div></div><div id="post-after-related-post"><h4  class="related_post_title">Related Posts</h4><ul class="related_post"><li><a href="http://www.mkyong.com/spring/how-to-autowire-datasource-in-jdbcdaosupport/" title="How to autowire DataSource in JdbcDaoSupport">How to autowire DataSource in JdbcDaoSupport</a></li><li><a href="http://www.mkyong.com/unittest/testng-spring-integration-example/" title="TestNG + Spring Integration Example">TestNG + Spring Integration Example</a></li><li><a href="http://www.mkyong.com/spring/spring-and-java-thread-example/" title="Spring and Java Thread example">Spring and Java Thread example</a></li><li><a href="http://www.mkyong.com/jsf2/spring-autowired-into-jsf-custom-validator/" title="Spring @Autowired into JSF custom validator">Spring @Autowired into JSF custom validator</a></li><li><a href="http://www.mkyong.com/spring3/spring-3-and-jsr-330-inject-and-named-example/" title="Spring 3 and JSR-330 @Inject and @Named example">Spring 3 and JSR-330 @Inject and @Named example</a></li></ul></div><div id="post-after-popular-post"><h4>Popular Posts</h4><ul><li><a href="/featured/top-8-java-people-you-should-know/">Top 8 Java People You Should Know</a></li><li><a href="/featured/top-20-java-websites/">Top 20 Java Websites</a></li><li><a href="/featured/top-5-free-java-ebooks/">Top 5 Free Java eBooks</a></li><li><a href="/regular-expressions/10-java-regular-expression-examples-you-should-know/">Top 10 Java Regular Expression Examples</a></li><li><a href="/featured/top-5-open-source-qa-systems/">Top 5 Open Source Q&A Systems</a></li></ul></div><div class="clearboth"></div></div></article><div id='st-tutorial-list'><div id='st-tutorial-title'> You might also like following tutorials :</div><ul><li><a href='/tutorials/spring-tutorials/' title='Spring Tutorials'><div class='images img-border img-spring'></div></a></li><li><a href='/tutorials/jax-ws-tutorials/' title='JAX-WS Tutorials'><div class='images img-border img-jaxws'></div></a></li><li><a href='/tutorials/spring-mvc-tutorials/' title='Spring MVC Tutorials'><div class='images img-border img-spring'></div></a></li><li><a href='/tutorials/java-regular-expression-tutorials/' title='Java RegEx Tutorials'><div class='images img-border img-regex'></div></a></li><li><a href='/tutorials/jsf-2-0-tutorials/' title='JSF 2 Tutorials'><div class='images img-border img-jsf2'></div></a></li></ul><div class='clearboth'></div></div><div style="padding:0 20px 20px 0"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="728x90" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><div id="post-comments"><div id="disqus_thread"><div id="dsq-content"><ul id="dsq-comments"><li class="post pingback"><p>Pingback: <a href='http://programminganswer.com/102416/spring-auto-components-scanning-with-constructor-injection.html' rel='external nofollow' class='url'>Spring Auto Components Scanning with Constructor injection | Technology &amp; Programming</a></p></li></li><li class="comment even thread-even depth-1" id="dsq-comment-138755"><div id="dsq-comment-header-138755" class="dsq-comment-header"> <cite id="dsq-cite-138755"> <span id="dsq-author-user-138755">Nigel Thomas</span> </cite></div><div id="dsq-comment-body-138755" class="dsq-comment-body"><div id="dsq-comment-message-138755" class="dsq-comment-message"><p>Hi,<br /> I have a doubt regarding @Component</p><p>In one of the classes I have seen like<br /> @Component(&#8220;CORE.TestClass&#8221;)<br /> @Scope(&#8220;singleton&#8221;)<br /> public class TestClass implements ITestHelper{</p><p>After running the application it will throw an error like:</p><p>Caused By: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#8216;CORE.CoherenceCacheHelper&#8217; defined in URL [zip:D:/system12.1.2.0.40.66.68/DefaultDomain/servers/DefaultServer/tmp/_WL_user/ADF-TEST/21n7qx/war/WEB-INF/lib/TestClass.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [TestClass]: Constructor threw exception; nested exception is java.lang.ExceptionInInitializerError<br /> at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:883)</p><p>Why is this error occurring ?</p><p>Nigel.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-138051"><div id="dsq-comment-header-138051" class="dsq-comment-header"> <cite id="dsq-cite-138051"> <span id="dsq-author-user-138051">joe</span> </cite></div><div id="dsq-comment-body-138051" class="dsq-comment-body"><div id="dsq-comment-message-138051" class="dsq-comment-message"><p>Hi Mkyong,<br /> This is the most well explained article i&#8217;ve read in a while. Many thanks for sharing your expertise!</p><p>Best Regards.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-137934"><div id="dsq-comment-header-137934" class="dsq-comment-header"> <cite id="dsq-cite-137934"> <span id="dsq-author-user-137934">Pankaj Kumar Mishra</span> </cite></div><div id="dsq-comment-body-137934" class="dsq-comment-body"><div id="dsq-comment-message-137934" class="dsq-comment-message"><p>Hello Sir,<br /> Could please help me by providing example/s or link of example/s which usage</p><p>@Configuration<br /> @Import<br /> @ImportResource<br /> Annotation at a time&#8211;&gt; as these are also supported by Auto Component Scan. I want to understand their relation.</p><p>with following Annotaion-<br /> @Component, @Service, @Repository, @Controller, @Endpoint<br /> , @Bean, @Lazy, @Scope, @Order, @Primary, @Profile, @DependsOn</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-135947"><div id="dsq-comment-header-135947" class="dsq-comment-header"> <cite id="dsq-cite-135947"> <span id="dsq-author-user-135947">sharan</span> </cite></div><div id="dsq-comment-body-135947" class="dsq-comment-body"><div id="dsq-comment-message-135947" class="dsq-comment-message"><p>Very nice article,  my doubt got clear.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-135804"><div id="dsq-comment-header-135804" class="dsq-comment-header"> <cite id="dsq-cite-135804"> http://<a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="8decfee5e0fdecf9e8e1cdeae0ece4e1a3eee2e0">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> <span id="dsq-author-user-135804">ash</span> </cite></div><div id="dsq-comment-body-135804" class="dsq-comment-body"><div id="dsq-comment-message-135804" class="dsq-comment-message"><p>Nice article. clear and to the point.</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-135700"><div id="dsq-comment-header-135700" class="dsq-comment-header"> <cite id="dsq-cite-135700"> <span id="dsq-author-user-135700">Chandan</span> </cite></div><div id="dsq-comment-body-135700" class="dsq-comment-body"><div id="dsq-comment-message-135700" class="dsq-comment-message"><p>Hi Mkyong,</p><p>I have a doubt. Usually a spring mvc application will have dao, service, controller and form (component) which will all be treated as beans. So in the bean xml how do i declare these</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-134787"><div id="dsq-comment-header-134787" class="dsq-comment-header"> <cite id="dsq-cite-134787"> http://<a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="daacb3a9b3b5b4aebfb9b2b4b3b1bfa89abdb7bbb3b6f4b9b5b7">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> <span id="dsq-author-user-134787">Shivang</span> </cite></div><div id="dsq-comment-body-134787" class="dsq-comment-body"><div id="dsq-comment-message-134787" class="dsq-comment-message"><p>The tutorial is just mind blowing. Very thanks to you MKYong</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-131408"><div id="dsq-comment-header-131408" class="dsq-comment-header"> <cite id="dsq-cite-131408"> <span id="dsq-author-user-131408">Anta</span> </cite></div><div id="dsq-comment-body-131408" class="dsq-comment-body"><div id="dsq-comment-message-131408" class="dsq-comment-message"><p>Nice post &#8230; explained the concept in such an easy way.</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-131271"><div id="dsq-comment-header-131271" class="dsq-comment-header"> <cite id="dsq-cite-131271"> <span id="dsq-author-user-131271">adrian</span> </cite></div><div id="dsq-comment-body-131271" class="dsq-comment-body"><div id="dsq-comment-message-131271" class="dsq-comment-message"><p>hello,</p><p>i saw this example. Very clear.<br /> The problem I have is that I got the error in the file xml on the line with &lt;context:component-scan&#8230;. The error says that it cannot find a definition for &quot;&lt;context&#8230;&quot; because it cannot find the xsd definition file.<br /> I use eclipse and spring 2.5 and I got this error for all other projects I have.</p><p>Thank you,<br /> Adrian</p></div></div><ul class="children"><li class="comment odd alt depth-2" id="dsq-comment-133251"><div id="dsq-comment-header-133251" class="dsq-comment-header"> <cite id="dsq-cite-133251"> <span id="dsq-author-user-133251">Veeranna</span> </cite></div><div id="dsq-comment-body-133251" class="dsq-comment-body"><div id="dsq-comment-message-133251" class="dsq-comment-message"><p>Cause you haven&#8217;t mentioned xsd&#8217;s perfectly. I&#8217;m using spring 3.x and I got the same error. Rectified that error after putting this code. So google it about xsd s or copy paste mine and change the spring version.</p></div></div><ul class="children"><li class="comment even depth-3" id="dsq-comment-133252"><div id="dsq-comment-header-133252" class="dsq-comment-header"> <cite id="dsq-cite-133252"> <span id="dsq-author-user-133252">Veeranna</span> </cite></div><div id="dsq-comment-body-133252" class="dsq-comment-body"><div id="dsq-comment-message-133252" class="dsq-comment-message"></div></div></li><li class="comment odd alt depth-3" id="dsq-comment-133625"><div id="dsq-comment-header-133625" class="dsq-comment-header"> <cite id="dsq-cite-133625"> <span id="dsq-author-user-133625">AJ</span> </cite></div><div id="dsq-comment-body-133625" class="dsq-comment-body"><div id="dsq-comment-message-133625" class="dsq-comment-message"><p>Add this attribute to the beans tag in your configuration xml. Change 2.5 to 3.0 if you&#8217;re using that version.</p><p>xsi:schemaLocation=&#8221;http://www.springframework.org/schema/beans<br /> <a href="http://www.springframework.org/schema/beans/spring-beans-2.5.xsd" rel="nofollow">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</a><br /> <a href="http://www.springframework.org/schema/context" rel="nofollow">http://www.springframework.org/schema/context</a><br /> <a href="http://www.springframework.org/schema/context/spring-context-2.5.xsd" rel="nofollow">http://www.springframework.org/schema/context/spring-context-2.5.xsd</a></p></div></div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-130022"><div id="dsq-comment-header-130022" class="dsq-comment-header"> <cite id="dsq-cite-130022"> <span id="dsq-author-user-130022">Mahender</span> </cite></div><div id="dsq-comment-body-130022" class="dsq-comment-body"><div id="dsq-comment-message-130022" class="dsq-comment-message"><p>your superb&#8230;&#8230;.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-128921"><div id="dsq-comment-header-128921" class="dsq-comment-header"> <cite id="dsq-cite-128921"> <span id="dsq-author-user-128921">Kumaran</span> </cite></div><div id="dsq-comment-body-128921" class="dsq-comment-body"><div id="dsq-comment-message-128921" class="dsq-comment-message"><p>crystal clear&#8230;</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-128109"><div id="dsq-comment-header-128109" class="dsq-comment-header"> <cite id="dsq-cite-128109"> http://alikemaltasci.blogspot.com <span id="dsq-author-user-128109">Ali Kemal</span> </cite></div><div id="dsq-comment-body-128109" class="dsq-comment-body"><div id="dsq-comment-message-128109" class="dsq-comment-message"><p>Thanks :)</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-126272"><div id="dsq-comment-header-126272" class="dsq-comment-header"> <cite id="dsq-cite-126272"> <span id="dsq-author-user-126272">devi</span> </cite></div><div id="dsq-comment-body-126272" class="dsq-comment-body"><div id="dsq-comment-message-126272" class="dsq-comment-message"><p>great Article</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-125634"><div id="dsq-comment-header-125634" class="dsq-comment-header"> <cite id="dsq-cite-125634"> <span id="dsq-author-user-125634">Peter Jerald</span> </cite></div><div id="dsq-comment-body-125634" class="dsq-comment-body"><div id="dsq-comment-message-125634" class="dsq-comment-message"><p>Thanks bro, your articles saved me in various situations, Please keep doing the same.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-124534"><div id="dsq-comment-header-124534" class="dsq-comment-header"> <cite id="dsq-cite-124534"> <span id="dsq-author-user-124534">Alex</span> </cite></div><div id="dsq-comment-body-124534" class="dsq-comment-body"><div id="dsq-comment-message-124534" class="dsq-comment-message"><p>Thank you for your posts. Your English is not the best and really frustrating but your excellent tutorials make up for it. Keep up the great work!</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-124048"><div id="dsq-comment-header-124048" class="dsq-comment-header"> <cite id="dsq-cite-124048"> <span id="dsq-author-user-124048">Saravanan</span> </cite></div><div id="dsq-comment-body-124048" class="dsq-comment-body"><div id="dsq-comment-message-124048" class="dsq-comment-message"><p>Awesome&#8230; I have used this concept in my project, but haven&#8217;t understand clearly. After reading this article got clear concept&#8230; Thanks</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-123493"><div id="dsq-comment-header-123493" class="dsq-comment-header"> <cite id="dsq-cite-123493"> <span id="dsq-author-user-123493">bruno</span> </cite></div><div id="dsq-comment-body-123493" class="dsq-comment-body"><div id="dsq-comment-message-123493" class="dsq-comment-message"><p>Thank you for this post, clear and objective.</p></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-123482"><div id="dsq-comment-header-123482" class="dsq-comment-header"> <cite id="dsq-cite-123482"> <span id="dsq-author-user-123482">Sharath</span> </cite></div><div id="dsq-comment-body-123482" class="dsq-comment-body"><div id="dsq-comment-message-123482" class="dsq-comment-message"><p>Thanks a lot mkYong.. the above post gives good understanding.</p></div></div></li><li class="comment odd alt thread-even depth-1" id="dsq-comment-85774"><div id="dsq-comment-header-85774" class="dsq-comment-header"> <cite id="dsq-cite-85774"> <span id="dsq-author-user-85774">ahmet</span> </cite></div><div id="dsq-comment-body-85774" class="dsq-comment-body"><div id="dsq-comment-message-85774" class="dsq-comment-message"><p>why do we use @Override ?</p></div></div><ul class="children"><li class="comment even depth-2" id="dsq-comment-124230"><div id="dsq-comment-header-124230" class="dsq-comment-header"> <cite id="dsq-cite-124230"> <span id="dsq-author-user-124230">js518</span> </cite></div><div id="dsq-comment-body-124230" class="dsq-comment-body"><div id="dsq-comment-message-124230" class="dsq-comment-message"><p>If not , toString() will print com.xx.xx.xx@112 other than info you want to .</p></div></div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-84890"><div id="dsq-comment-header-84890" class="dsq-comment-header"> <cite id="dsq-cite-84890"> <span id="dsq-author-user-84890">Pritish</span> </cite></div><div id="dsq-comment-body-84890" class="dsq-comment-body"><div id="dsq-comment-message-84890" class="dsq-comment-message"><p>Excellent post !</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-82746"><div id="dsq-comment-header-82746" class="dsq-comment-header"> <cite id="dsq-cite-82746"> <span id="dsq-author-user-82746">Nitesh</span> </cite></div><div id="dsq-comment-body-82746" class="dsq-comment-body"><div id="dsq-comment-message-82746" class="dsq-comment-message"><p>simple and easy..<br /> thanx</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-80287"><div id="dsq-comment-header-80287" class="dsq-comment-header"> <cite id="dsq-cite-80287"> <span id="dsq-author-user-80287">Levan</span> </cite></div><div id="dsq-comment-body-80287" class="dsq-comment-body"><div id="dsq-comment-message-80287" class="dsq-comment-message"><p>Thanks&#8230;</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-76529"><div id="dsq-comment-header-76529" class="dsq-comment-header"> <cite id="dsq-cite-76529"> <span id="dsq-author-user-76529">Borgy Manotoy</span> </cite></div><div id="dsq-comment-body-76529" class="dsq-comment-body"><div id="dsq-comment-message-76529" class="dsq-comment-message"><p>I have a related question regarding autowiring :)</p><p>I created a new controller, MyController.java&#8230; I wanted to autowire some service interfaces (AccountService, CompetitionService).</p><p>In my application, there are already other existing controllers (i.e InvitationController.java, CompetitionController.java, etc) which does not have any autowire issues.</p><p>all of them belongs to the same package (i.e. com.test.app), I also added the line below in the XML file.</p><p>now, I really do not know why I am having difficulties in autowiring the service interfaces  in the newly created controller.</p><p>I tried almost copying the code of the most simple existing controller but still I have no luck of making the autowiring works.. :-(</p><p>any idea?</p><p>hope somebody can help me&#8230; I&#8217;m just a noob in spring :)</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-72728"><div id="dsq-comment-header-72728" class="dsq-comment-header"> <cite id="dsq-cite-72728"> http://www.kogantivijay.com <span id="dsq-author-user-72728">vijay</span> </cite></div><div id="dsq-comment-body-72728" class="dsq-comment-body"><div id="dsq-comment-message-72728" class="dsq-comment-message"><p>Can you explain why you don&#8217;t need to Include  in the configuration file as explained in your other Tuturial ?</p><p>regards,<br /> vijay</p></div></div></li><li class="comment even thread-even depth-1" id="dsq-comment-72274"><div id="dsq-comment-header-72274" class="dsq-comment-header"> <cite id="dsq-cite-72274"> <span id="dsq-author-user-72274">Alebald</span> </cite></div><div id="dsq-comment-body-72274" class="dsq-comment-body"><div id="dsq-comment-message-72274" class="dsq-comment-message"><p>Could you please tell me, how to use Spring Auto Scanning<br /> for multiple path. say i have my Action Objects at &#8220;com.personal.server.handler&#8221; and<br /> Dao at &#8220;com.personal.server.dao.handler&#8221;. Sould i use two explicit  tag in my configuration.xml ?</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-72271"><div id="dsq-comment-header-72271" class="dsq-comment-header"> <cite id="dsq-cite-72271"> <span id="dsq-author-user-72271">alex</span> </cite></div><div id="dsq-comment-body-72271" class="dsq-comment-body"><div id="dsq-comment-message-72271" class="dsq-comment-message"><p>thx ! this article easy to understand, really great</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/webservices/jax-rs/jersey-spring-integration-example/' rel='external nofollow' class='url'>Jersey + Spring integration example</a></p></li></li><li class="comment even thread-even depth-1" id="dsq-comment-47515"><div id="dsq-comment-header-47515" class="dsq-comment-header"> <cite id="dsq-cite-47515"> <span id="dsq-author-user-47515">Dhafir</span> </cite></div><div id="dsq-comment-body-47515" class="dsq-comment-body"><div id="dsq-comment-message-47515" class="dsq-comment-message"><p>Brilliant article! Easy and straightforward.<br /> Thank you!</p></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-46817"><div id="dsq-comment-header-46817" class="dsq-comment-header"> <cite id="dsq-cite-46817"> <span id="dsq-author-user-46817">anil</span> </cite></div><div id="dsq-comment-body-46817" class="dsq-comment-body"><div id="dsq-comment-message-46817" class="dsq-comment-message"><p>What about perfomance issues with Auto Scanning Component compared to Manual Components Declaration ?</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/spring-mvc/spring-mvc-hello-world-annotation-example/' rel='external nofollow' class='url'>Spring MVC hello world annotation example</a></p></li></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/tutorials/spring-tutorials/' rel='external nofollow' class='url'>Spring Tutorials | J2EE Web Development Tutorials</a></p></li></li><li class="comment even thread-even depth-1" id="dsq-comment-6525"><div id="dsq-comment-header-6525" class="dsq-comment-header"> <cite id="dsq-cite-6525"> <span id="dsq-author-user-6525">Noman</span> </cite></div><div id="dsq-comment-body-6525" class="dsq-comment-body"><div id="dsq-comment-message-6525" class="dsq-comment-message"><p>hmmmm  nice  great  post&#8230;.</p></div></div></li><li class="post pingback"><p>Pingback: <a href='http://www.mkyong.com/spring/spring-filtering-components-in-auto-scanning/' rel='external nofollow' class='url'>Spring &#8211; Filtering Components in Auto Scanning | Spring</a></p></li></li></ul></div></div><script type="text/javascript">/*<![CDATA[*/var disqus_url='http://www.mkyong.com/spring/spring-auto-scanning-components/';var disqus_identifier='3854 http://www.mkyong.com/?p=3854';var disqus_container_id='disqus_thread';var disqus_domain='disqus.com';var disqus_shortname='mkyong';var disqus_title="Spring Auto scanning components";var disqus_config=function(){var config=this;config.language='';config.callbacks.preData.push(function(){document.getElementById(disqus_container_id).innerHTML='';});config.callbacks.onReady.push(function(){var script=document.createElement('script');script.async=true;script.src='?cf_action=sync_comments&post_id=3854';var firstScript=document.getElementsByTagName("script")[0];firstScript.parentNode.insertBefore(script,firstScript);});};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/var DsqLocal={'trackbacks':[{'author_name':"Spring &#8211; Filtering Components in Auto Scanning | Spring",'author_url':"http:\/\/www.mkyong.com\/spring\/spring-filtering-components-in-auto-scanning\/",'date':"03\/25\/2010 05:26 AM",'excerpt':"[...] Components in Auto Scanning  Written on March 25, 2010 at 5:25 am by mkyong     &hellip;",'type':"pingback"},{'author_name':"Spring Tutorials | J2EE Web Development Tutorials",'author_url':"http:\/\/www.mkyong.com\/tutorials\/spring-tutorials\/",'date':"05\/26\/2010 01:20 PM",'excerpt':"[...] Auto Scanning Components How to automatic scan, detect and instantiate your beans or components from project class path. [...] ",'type':"pingback"},{'author_name':"Spring MVC hello world annotation example",'author_url':"http:\/\/www.mkyong.com\/spring-mvc\/spring-mvc-hello-world-annotation-example\/",'date':"08\/18\/2010 05:05 AM",'excerpt':"[...] \/&gt; &nbsp; &lt;\/beans&gt;  Note You may interest at this Spring auto scanning components [...] ",'type':"pingback"},{'author_name':"Jersey + Spring integration example",'author_url':"http:\/\/www.mkyong.com\/webservices\/jax-rs\/jersey-spring-integration-example\/",'date':"07\/20\/2011 02:18 AM",'excerpt':"[...] Jersey-Spring-Integration-Example.zip (8 KB)ReferencesJersey Spring JavaDocSpring 3 in JerseySpring auto component scanningRESTEasy + Spring integration example [...] ",'type':"pingback"},{'author_name':"Spring Auto Components Scanning with Constructor injection | Technology &amp; Programming",'author_url':"http:\/\/programminganswer.com\/102416\/spring-auto-components-scanning-with-constructor-injection.html",'date':"11\/11\/2013 08:48 PM",'excerpt':"[&#8230;] know how to use Auto Components Scanning and Consctuctor Injection individually. http:\/\/www.mkyong.com\/spring\/spring-auto-scanning-components\/ [&#8230;] ",'type':"pingback"}],'trackback_url':"http:\/\/www.mkyong.com\/spring\/spring-auto-scanning-components\/trackback\/"};/*]]>*/</script><script type="text/javascript">/*<![CDATA[*/(function(){var dsq=document.createElement('script');dsq.type='text/javascript';dsq.async=true;dsq.src='//'+disqus_shortname+'.'+'disqus.com'+'/embed.js?pname=wordpress&pver=2.74';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(dsq);})();/*]]>*/</script></div></div><!-- google_ad_section_end --></div><div class="span4"><div id="sidebar"><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7072877400" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="5738517670" data-ad-region="mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" id="sidebar-fb"><div class='dd-loading' id='dd-fbpage'></div><iframe id='dd-fbpage-iframe' src='' height='0' width='0' scrolling='no' frameborder='0' style="border:none;overflow:hidden;" allowTransparency="true" ></iframe></div><div class="sidebar-ads"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="300x250" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div><h2>Recent Posts</h2><div class="block"><ul><li><img width="32" height="17" src="http://www.mkyong.com/wp-content/uploads/2014/07/jsf-log4j-logo-150x80.jpg" class="attachment-32x32 wp-post-image" alt="jsf log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/jsf2/jsf-2-log4j-integration-example/">JSF 2 + Log4j Integration Example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-hello-world-example/">Log4j hello world example </a></div><div class="clearboth"></div></li><li><img width="32" height="29" src="http://www.mkyong.com/wp-content/uploads/2014/07/logo-150x139.jpg" class="attachment-32x32 wp-post-image" alt="log4j logo" /><div class="rt-label"><a href="http://www.mkyong.com/logging/log4j-xml-example/">log4j.xml Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-annotation-example/">Spring Security + Hibernate Annotation Example </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/spring-logo.png" class="attachment-32x32 wp-post-image" alt="spring-logo" /><div class="rt-label"><a href="http://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/">Spring Security + Hibernate XML Example </a></div><div class="clearboth"></div></li></ul></div><h2>Popular Tutorials</h2><div class="block"><ul><li><img width="29" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/03/android.png" class="attachment-32x32 wp-post-image" alt="android" /><div class="rt-label"><a rel="tooltip" title="Created : 2012-03-22 14:48:53" href="http://www.mkyong.com/tutorials/android-tutorial/">Android Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="32" src="http://www.mkyong.com/wp-content/uploads/2012/07/jsf2-logo.png" class="attachment-32x32 wp-post-image" alt="jsf2-logo" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-12-12 10:56:54" href="http://www.mkyong.com/tutorials/jsf-2-0-tutorials/">JSF 2.0 Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/04/Spring-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Spring tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-04-01 11:09:26" href="http://www.mkyong.com/tutorials/spring-tutorials/">Spring Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/maven-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Maven tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:24:51" href="http://www.mkyong.com/tutorials/maven-tutorials/">Maven Tutorial </a></div><div class="clearboth"></div></li><li><img width="32" height="21" src="http://www.mkyong.com/wp-content/uploads/2010/03/Hibernate-tutorials-150x100.png" class="attachment-32x32 wp-post-image" alt="Hibernate tutorials" /><div class="rt-label"><a rel="tooltip" title="Created : 2010-03-31 08:18:30" href="http://www.mkyong.com/tutorials/hibernate-tutorials/">Hibernate Tutorial </a></div><div class="clearboth"></div></li></ul></div><div class="sidebar-ads"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> <ins class="adsbygoogle" style="display:inline-block;width:300px;height:600px" data-ad-client="ca-pub-2836379775501347" data-ad-slot="7953295395" data-ad-region = "mkyongregion"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script></div><div class="sidebar-ads" style="text-align: center"><div data-type="ad" data-publisher="lqm.j2ee.site" data-zone="ron" data-format="160x600" data-tags="Java%2cSpring%2cAndroid%2cMobile%2cjQuery%2cUnit%20Test%2cASP.NET%20MVC%2cDI%2cTDD"></div></div></div></div></div></div> <script type='text/javascript'>var _wpcf7={"loaderUrl":"http:\/\/www.mkyong.com\/wp-content\/plugins\/contact-form-7\/images\/ajax-loader.gif","sending":"Sending ...","cached":"1"};</script><footer><div id="footer-container"><div class="container"><div class="row"><div class="span4" id="footer-all-tut"><h3>All Available Tutorials</h3><ul class="unstyled"><li>Java Core Technologies :<div> <a href="/tutorials/java-io-tutorials/">Java I/O</a>, <a href="/tutorials/java-regular-expression-tutorials/">Java RegEx</a>, <a href="/tutorials/java-xml-tutorials/">Java XML</a>, <a href="/tutorials/java-json-tutorials/">Java JSON</a>, <a href="/tutorials/jdbc-tutorials/">JDBC</a>, <a href="/category/java/">Java Misc</a></div></li><li>J2EE Frameworks :<div> <a href="/tutorials/hibernate-tutorials/">Hibernate</a>, <a href="/tutorials/jsf-2-0-tutorials/">JSF 2.0</a>, <a href="/tutorials/spring-tutorials/">Spring Core</a>, <a href="/tutorials/spring-mvc-tutorials/">Spring MVC</a>, <a href="/tutorials/spring-security-tutorials/">Spring Security</a>, <a href="/tutorials/java-mongodb-tutorials/#spring-mongodb">Spring MongoDB</a>, <a href="/tutorials/spring-batch-tutorial/">Spring Batch</a><a href="/tutorials/wicket-tutorials/">Apache Wicket</a>, <a href="/tutorials/struts-tutorials/">Struts 1.x</a>, <a href="/tutorials/struts-2-tutorials/">Struts 2.x</a></div></li><li>Web Service :<div> <a href="/tutorials/jax-ws-tutorials/">JAX-WS (SOAP)</a>, <a href="/tutorials/jax-rs-tutorials/">JAX-RS (REST)</a></div></li><li>Build Tools :<div> <a href="/tutorials/maven-tutorials/">Maven</a>, <a href="/tutorials/apache-archiva-tutorials/">Archiva</a></div></li><li>Unit Test Frameworks :<div> <a href="/tutorials/junit-tutorials/">jUnit</a>, <a href="/tutorials/testng-tutorials/">TestNG</a></div></li><li>Others :<div> <a href="/tutorials/android-tutorial/">Android</a>, <a href="/tutorials/google-app-engine-tutorial/">Google App Engine</a>, <a href="/tutorials/jquery-tutorials/">jQuery</a>, <a href="/tutorials/java-mongodb-tutorials/">Java MongoDB</a>, <a href="/tutorials/quartz-scheduler-tutorial/">Quartz Scheduler</a></div></li></ul></div><div class="span3"><h3>Favorites Links</h3><ul class="unstyled"><li><a href="http://developer.android.com/training/index.html" target="_blank" rel="nofollow">Android Getting Started</a></li><li><a href="https://developers.google.com/appengine/docs/java/gettingstarted/" target="_blank" rel="nofollow">Google App Engine - Java</a></li><li><a href="http://www.dzone.com/" target="_blank" rel="nofollow">DZone - Fresh Links</a></li><li><a href="http://docs.oracle.com/javaee/5/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 5 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/docinfo.html" target="_blank" rel="nofollow">Official Java EE 6 Tutorial</a></li><li><a href="http://docs.oracle.com/javaee/7/tutorial/doc/" target="_blank" rel="nofollow">Official Java EE 7 Tutorial</a></li><li><a href="http://docs.spring.io/spring/docs/2.5.x/reference/index.html" target="_blank" rel="nofollow">Spring 2.5.x documentation</a></li><li><a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/" target="_blank" rel="nofollow">Spring 3.2.x documentation</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/" target="_blank">Spring Security 3.2.x documentation</a></li><li><a href="http://docs.jboss.org/hibernate/core/4.3/manual/en-US/html_single/" target="_blank" rel="nofollow">Hibernate core 4.3 documentation</a></li><li><a href="http://download.oracle.com/javase/6/docs/api/overview-summary.html" target="_blank" rel="nofollow">Java SE 6.0 API documentation</a></li><li><a href="http://jsp.java.net/" target="_blank" rel="nofollow">JSP home page</a></li><li><a href="http://javaserverfaces.java.net/" target="_blank" rel="nofollow">JSF home page</a></li><li><a href="http://www.eclipse.org/downloads/" target="_blank" rel="nofollow">Eclipse IDE for Java developer</a></li><li><a href="http://struts.apache.org/release/1.3.x/userGuide/index.html" target="_blank" rel="nofollow">Struts 1.3.x documentation</a></li><li><a href="http://struts.apache.org/release/2.3.x/docs/home.html" target="_blank" rel="nofollow">Struts 2.3.x documentation</a></li><li><a href="http://maven.apache.org/" target="_blank" rel="nofollow">Maven home page</a></li><li><a href="http://search.maven.org/" target="_blank" rel="nofollow">Maven central repository Search</a></li><li><a href="http://ant.apache.org/" target="_blank" rel="nofollow">Ant home page</a></li><li><a href="http://jax-ws.java.net/" target="_blank" rel="nofollow">JAX-WS Official Website</a></li><li><a href="http://jersey.java.net/" target="_blank" rel="nofollow">JAX-RS Official Website (Jersey)</a></li></ul></div><div class="span3"><h3>Friends &amp; Links</h3><ul class="unstyled"><input type="hidden" name="activepost" id="activepost" value="3854" /><li><a href="http://www.javacodegeeks.com/" target="_blank">Java Code Geeks</a></li><li><a href="http://www.videophpblog.com" target="_blank">PHP Tutorials</a></li><li><a href="http://www.tenthofmarch.com/" target="_blank">TenthOfMarch</a></li><li><a href="http://www.web2secure.com" target="_blank">Web Security Blog</a></li><li><a href="http://www.fromdev.com" target="_blank">Web Development</a></li><li><a href="http://beust.com" target="_blank">Cédric Beust (TestNG)</a></li></ul></div><div class="span4"><h3>About Us</h3><p> Mkyong.com is a weblog dedicated to Java/J2EE developers and Web Developers. We constantly publish useful tricks, tutorials on J2EE or web development.</p><p> All examples are simple, easy to read, and full source code available, and of course well tested in our development environment.</p> <strong>We're Social</strong><ol><li>Twitter - <a href="http://twitter.com/#!/mkyong" target="_blank">Follow Me</a></li><li>Facebook - <a href="http://www.facebook.com/java.tutorial" target="_blank">Like Me</a></li><li>Google Plus - <a href="https://plus.google.com/110948163568945735692" target="_blank">Add Me</a></li><li>RSS - <a href="http://feeds.feedburner.com/FeedForMkyong" target="_blank">Subscribe Me</a></li></ol></div></div></div></div><div id="footer-copyright"><div class="container"> Copyright &copy; 2008-2014 Mkyong.com, all rights reserved.</div></div></footer><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-752408-5','mkyong.com');ga('send','pageview');</script><script type='text/javascript'>function _dmBootstrap(file){var _dma=document.createElement('script');_dma.type='text/javascript';_dma.async=true;_dma.src=('https:'==document.location.protocol?'https://':'http://')+file;(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(_dma);}
function _dmFollowup(file){if(typeof DMAds==='undefined')_dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
(function(){_dmBootstrap('cdn1.DeveloperMedia.com/a.min.js');setTimeout(_dmFollowup,2000);})();</script><script type="text/javascript" src="/wp-content/themes/mkyong-ma/js/core-latest.js?v=2013"></script><script type="text/javascript">function w3tc_load_js(u){var d=document,p=d.getElementsByTagName('HEAD')[0],c=d.createElement('script');c.type='text/javascript';c.src=u;p.appendChild(c);}</script><script type="text/javascript">w3tc_load_js('http://www.mkyong.com/wp-content/cache/minify/000000/481ba/default.include-footer.15c8b4.js');</script></body></html>